[
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Information Gathering",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/01-Information_Gathering/01-Conduct_Search_Engine_Discovery_Reconnaissance_for_Information_Leakage"
                ],
                "locale": "fr",
                "title": "Divulgation d'informations sensibles indexées dans les moteurs de recherche Web ou d'autres sources publiques",
                "vulnType": "OWASP WSTG",
                "description": "<p>Les moteurs de recherche peuvent être utilisés pour effectuer la reconnaissance de sites Web et d'applications. Il existe des éléments directs et indirects dans la découverte et la reconnaissance des moteurs de recherche : les méthodes directes sont liées à la recherche dans les index et le contenu associé des caches, tandis que les méthodes indirectes sont liées à l'apprentissage d'informations sensibles sur la présentation et la configuration en effectuant une recherche dans les forums, les groupes de discussion et les sites Web. . En utilisant des moteurs de recherche tels que Google, DuckDuckGo ou Bing, il est possible de trouver des informations potentiellement sensibles telles que : - Des schémas et configurations de réseau. - Messages et e-mails archivés des administrateurs ou d'autres membres du personnel clé. - Procédures de connexion et formats de nom d'utilisateur. - Noms d'utilisateur, mots de passe et clés privées. - Fichiers de configuration provenant de tiers ou de services cloud. - Contenu des messages d'erreur révélateurs. - Versions de développement, tests, tests d'acceptation utilisateur (UAT) et versions de test des applications.</p>",
                "observation": "<p>Confidentialité : Lire les données de l'application : L'attaquant peut être en mesure de lire des informations sensibles</p>",
                "remediation": "<p>Avant de publier une application, il est essentiel de considérer la sensibilité des données qui y sont exposées afin d'éviter toute divulgation accidentelle d'informations sensibles.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Information Gathering",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server",
                    "https://cwe.mitre.org/data/definitions/200.html",
                    "https://wiki.owasp.org/index.php/Testing_for_Web_Application_Fingerprint_(OWASP-IG-004)"
                ],
                "locale": "fr",
                "title": "Divulgation d'informations sensibles dans les en-têtes HTTP",
                "vulnType": "OWASP WSTG",
                "description": "<p>Cette situation se produit lorsque l'application révèle le type et/ou la version d'un composant interne utilisé en révélant des informations dans les en-têtes du protocole HTTP. Grâce à ces informations, le système d'exploitation, un de ses services (web, messagerie, transfert de fichiers...), ou un de ses composants (PHP, mod_proxy, WebDAV...) peut être révélé.</p>",
                "observation": "<p>Confidentialité : Lire les données de l'application : L'attaquant peut être en mesure de lire des informations sensibles</p>",
                "remediation": "<p>Pour empêcher ce type de divulgation d'informations, il est nécessaire de masquer les informations affichées dans les en-têtes de protocole. Pour empêcher ce type de divulgation d'informations, il est nécessaire de masquer les informations affichées dans les en-têtes de protocole. Un correctif, qui est généralement une mise à jour ou l'application d'un correctif spécifique, est généralement nécessaire pour corriger les vulnérabilités publiées des composants détectés et nécessite le respect des recommandations du fabricant du logiciel vulnérable pour résoudre les vulnérabilités. Il faudrait décider s'il faut cesser d'offrir le service jusqu'à ce qu'une solution soit trouvée ou prendre le risque de le faire même en l'absence de solution publiée.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Information Gathering",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework"
                ],
                "locale": "fr",
                "title": "Divulgation d'informations sensibles dans les cookies d'application",
                "vulnType": "OWASP WSTG",
                "description": "<p>La configuration des cookies expose des informations sensibles à la fois dans le nom préétabli du cookie et dans son contenu, ce qui conduit à cette vulnérabilité. Par exemple, un cookie portant le nom du logiciel avec lequel il a été créé.</p>",
                "observation": "<p>Confidentialité : Lire les données de l'application : L'attaquant peut être en mesure de lire des informations sensibles</p>",
                "remediation": "<p>Pour empêcher ce type de divulgation d'informations, il est nécessaire soit de masquer les données affichées dans les cookies, soit de modifier leur nom ou leur contenu. Afin de corriger les vulnérabilités révélées publiquement des composants détectés, il est généralement nécessaire de suivre les recommandations du fabricant pour résoudre les vulnérabilités, une solution qui implique généralement une mise à jour du logiciel ou l'application d'un correctif particulier. Il faudrait décider s'il faut cesser d'offrir le service jusqu'à ce qu'une solution soit trouvée ou prendre le risque de le faire même en l'absence de solution publiée.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Information Gathering",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/03-Review_Webserver_Metafiles_for_Information_Leakage",
                    "https://cwe.mitre.org/data/definitions/200.html",
                    "https://developers.google.com/search/docs/advanced/robots/intro"
                ],
                "locale": "fr",
                "title": "Divulgation d'informations sensibles dans le fichier « robots.txt »",
                "vulnType": "OWASP WSTG",
                "description": "<p>Certains programmes utilisent des robots araignées pour parcourir automatiquement les sites Web dans le but de les indexer. Tout utilisateur peut accéder au fichier \"robots.txt\", qui permet de spécifier les répertoires et ressources que l'administrateur souhaite indexer et ceux qu'il ne souhaite pas indexer. La configuration de ce fichier doit être manipulée avec une extrême prudence car elle peut révéler quelles ressources sont sensibles. Le fichier « robots.txt » contient des ressources sensibles qui pourraient être utilisées par un attaquant pour lancer des attaques plus sophistiquées et précises à partir des données recueillies.</p>",
                "observation": "<p>Confidentialité : Lire les données de l'application : L'attaquant peut être en mesure de lire des informations sensibles</p>",
                "remediation": "<p>Le fichier « robots.txt » ne doit pas être utilisé comme méthode pour restreindre l’accès aux zones non sécurisées de l’application. Au-delà de leur protection contre les robots de type araignée, l’accès à ces sections doit être correctement contrôlé contre d’éventuelles attaques.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Information Gathering",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/03-Review_Webserver_Metafiles_for_Information_Leakage",
                    "https://cwe.mitre.org/data/definitions/200.html"
                ],
                "locale": "fr",
                "title": "Divulgation d'informations sensibles dans le fichier 'sitemap.xml'",
                "vulnType": "OWASP WSTG",
                "description": "<p>Un développeur ou une organisation peut fournir des détails sur les ressources disponibles dans l'application et leurs connexions dans le fichier « sitemap.xml ». Le fichier « sitemap.xml » contient des ressources sensibles qui peuvent être utilisées par un attaquant pour lancer des attaques plus avancées et plus précises en utilisant les données qu'il a collectées.</p>",
                "observation": "<p>Confidentialité : Lire les données de l'application : L'attaquant peut être en mesure de lire des informations sensibles</p>",
                "remediation": "<p>Il est conseillé de supprimer du fichier « sitemap.xml » toutes les données sensibles qui ne sont pas nécessaires au développement de l'application.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Information Gathering",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/03-Review_Webserver_Metafiles_for_Information_Leakage",
                    "https://cwe.mitre.org/data/definitions/200.html"
                ],
                "locale": "fr",
                "title": "Divulgation d'informations sensibles dans le fichier « security.txt »",
                "vulnType": "OWASP WSTG",
                "description": "<p>Une norme proposée permet aux pages Web de spécifier des politiques de sécurité et des informations de contact dans le fichier « security.txt ». Le fichier « security.txt » contient des informations sensibles qui pourraient être utilisées par un attaquant pour lancer des attaques plus sophistiquées et précises à l'aide des données recueillies.</p>",
                "observation": "<p>Confidentialité : Lire les données de l'application : L'attaquant peut être en mesure de lire des informations sensibles</p>",
                "remediation": "<p>Il est conseillé de supprimer toutes les données privées du fichier « security.txt » qui ne sont pas nécessaires au développement de l'application.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Information Gathering",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/03-Review_Webserver_Metafiles_for_Information_Leakage",
                    "https://cwe.mitre.org/data/definitions/200.html"
                ],
                "locale": "fr",
                "title": "Divulgation d'informations sensibles dans le fichier « humans.txt »",
                "vulnType": "OWASP WSTG",
                "description": "<p>Le fichier \"humans.txt\" est un projet visant à en savoir plus sur les personnes qui créent un site Web. Le fichier « humans.txt » contient des informations sensibles qui pourraient être utilisées par un attaquant pour lancer des attaques plus sophistiquées et précises à l'aide des données collectées.</p>",
                "observation": "<p>Confidentialité : Lire les données de l'application : L'attaquant peut être en mesure de lire des informations sensibles</p>",
                "remediation": "<p>Il est conseillé de supprimer toutes les données privées du fichier \"humans.txt\" qui ne sont pas nécessaires au développement de l'application.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Information Gathering",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
                    "https://cwe.mitre.org/data/definitions/540.html"
                ],
                "locale": "fr",
                "title": "Divulgation d'informations sensibles dans le code source",
                "vulnType": "OWASP WSTG",
                "description": "<p>Cette situation se produit lorsque l'analyse d'un fichier téléchargé sur un serveur Web révèle des informations relatives au serveur qui peuvent être utilisées pour planifier de nouvelles attaques, telles que le type et la version des applications utilisées, les composants ou extensions utilisés, les informations d'identification. ..</p>",
                "observation": "<p>Confidentialité : Lire les données de l'application : L'attaquant peut être en mesure de lire des informations sensibles</p>",
                "remediation": "<p>Pour éviter les fuites d'informations sensibles, le code source HTML envoyé par le serveur doit être modifié.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Information Gathering",
        "details": [
            {
                "references": [
                    "https://cwe.mitre.org/data/definitions/497.html"
                ],
                "locale": "fr",
                "title": "Divulgation d'informations sensibles car le mode débogage est activé",
                "vulnType": "OWASP WSTG",
                "description": "<p>Il est parfois possible d'afficher des données techniques ou des secrets commerciaux au sein de l'application en utilisant un « paramètre d'activation de débogage ». De ce fait, l’attaquant augmente la taille de sa surface d’attaque en en apprenant davantage sur le fonctionnement de l’application. L'activation de l'indicateur de débogage peut parfois même entraîner des attaques par exécution de code (anciennes versions de werkzeug)</p>",
                "observation": "<p>Confidentialité : Lire les données de l'application : L'attaquant peut être en mesure de lire des informations sensibles</p>",
                "remediation": "<p>Les applications de production ne devraient jamais générer d'informations internes telles que des traces de pile et des messages d'erreur, à moins qu'elles ne les consignent directement dans un journal que l'utilisateur final ne peut pas voir. Avant d'être écrit dans le fichier journal, tout le texte du message d'erreur doit être codé en entité HTML pour empêcher d'éventuelles attaques de Cross Site Scripting contre la visionneuse de journaux.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Information Gathering",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
                    "https://cwe.mitre.org/data/definitions/200.html"
                ],
                "locale": "fr",
                "title": "Divulgation d’informations sensibles (générique)",
                "vulnType": "OWASP WSTG",
                "description": "<p>Un mot de passe, par exemple, est une information sensible qui peut être précieuse en soi ou être utilisée pour lancer d'autres attaques plus graves (comme l'obtention d'un message d'erreur incontrôlé). Le contenu des messages d’erreur peut être utilisé par un attaquant pour soutenir le lancement d’une attaque différente, plus ciblée. Une tentative d'exploitation d'une faille d'énumération de répertoire ou de traversée de chemin, par exemple, pourrait révéler le chemin complet vers l'application installée.</p>",
                "observation": "<p>Confidentialité : Lire les données de l'application : L'attaquant peut être en mesure de lire des informations sensibles</p>",
                "remediation": "<p>Créez des zones « sûres » au sein du système où les limites de confiance peuvent être clairement définies. Ne laissez aucune information sensible franchir les lignes de confiance et faites preuve d’une extrême prudence lorsque vous interagissez avec un compartiment en dehors d’une zone sécurisée.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Information Gathering",
        "details": [
            {
                "references": [
                    "https://cwe.mitre.org/data/definitions/200.html",
                    "https://cwe.mitre.org/data/definitions/359.html"
                ],
                "locale": "fr",
                "title": "Divulgation des informations d'identification (fuite des informations d'identification)",
                "vulnType": "OWASP WSTG",
                "description": "<p>Il a été possible de vérifier et de vérifier l'existence de fichiers contenant des informations sensibles, telles que des informations d'identification valides pour accéder à d'autres systèmes, sur divers points finaux. Aucun type de cookie ou système d'authentification antérieur n'est nécessaire pour accéder à ces informations d'identification.</p>",
                "observation": "<p>Confidentialité : Lire les données de l'application : L'attaquant peut être en mesure de lire des informations sensibles</p>",
                "remediation": "<p>Quel que soit le logiciel pour lequel ces informations d'identification utilisateur sont utilisées, il n'est jamais conseillé d'exposer des fichiers sensibles qui exposent les informations d'identification de l'utilisateur.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
        "category": "Information Gathering",
        "details": [
            {
                "references": [
                    "https://cwe.mitre.org/data/definitions/798.html"
                ],
                "locale": "fr",
                "title": "Utilisation d'informations d'identification codées en dur",
                "vulnType": "OWASP WSTG",
                "description": "<p>Pour son propre chiffrement interne des données, ses communications sortantes avec des composants externes et son authentification entrante, le logiciel dispose d'informations d'identification codées en dur, telles qu'un mot de passe ou une clé cryptographique. Les informations d'identification codées en dur produisent souvent une faille de sécurité importante qui permet à un attaquant de contourner les paramètres d'authentification définis par l'administrateur du logiciel.</p>",
                "observation": "<ul><li><p>Contrôle d'accès : contourner le mécanisme de protection : si des mots de passe codés en dur sont utilisés, il est presque certain que des utilisateurs malveillants auront accès au compte en question. - Contrôle d'accès : exécuter du code ou des commandes non autorisés : cette faiblesse peut conduire à l'exposition de ressources ou de fonctionnalités à des acteurs involontaires, fournissant éventuellement aux attaquants des informations sensibles ou même exécutant du code arbitraire.</p></li></ul>",
                "remediation": "<p>Au lieu de secrets et de clés d'API statiques, utilisez des jetons de session.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Information Gathering",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/05-Review_Webpage_Content_for_Information_Leakage",
                    "https://cwe.mitre.org/data/definitions/200.html",
                    "https://capec.mitre.org/data/definitions/118.html"
                ],
                "locale": "fr",
                "title": "Divulgation d'informations sensibles dans les métadonnées des fichiers disponibles dans l'application",
                "vulnType": "OWASP WSTG",
                "description": "<p>Le terme « métadonnées » fait référence à des informations sur un document qui sont principalement de nature descriptive. Des informations sur l'administration et la gestion peuvent également être incluses. La collection de données qui caractérise ou définit une information particulière à laquelle elles sont liées est appelée métadonnées. En améliorant les informations auxquelles elles sont liées, les métadonnées rendent l'interprétation informatique de ces informations beaucoup plus approfondie et améliorent la récupération de documents. Grâce à ses métadonnées, il s’est avéré qu’elles avaient été utilisées pour extraire des informations sensibles.</p>",
                "observation": "<p>Confidentialité : Lire les données de l'application : L'attaquant peut être en mesure de lire des informations sensibles</p>",
                "remediation": "<p>Il est conseillé que tous les fichiers disponibles dans l'application voient leurs métadonnées supprimées avant d'être rendus accessibles au réseau afin de résoudre cette vulnérabilité.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Information Gathering",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server",
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/04-Enumerate_Applications_on_Webserver",
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework"
                ],
                "locale": "fr",
                "title": "Divulgation d'informations sensibles dans le contenu par défaut",
                "vulnType": "OWASP WSTG",
                "description": "<p>Cela se produit lorsque les fichiers par défaut restent ouverts après l'installation d'un service ou d'une application. En raison du type d'informations qu'ils divulguent, comme le type et la version du serveur Web utilisé, l'existence de fichiers par défaut sur un serveur Web constitue une menace.</p>",
                "observation": "<p>Confidentialité : Lire les données de l'application : L'attaquant peut être en mesure de lire des informations sensibles</p>",
                "remediation": "<p>Afin de résoudre ce problème, tous les fichiers par défaut qui ne sont pas nécessaires au fonctionnement du serveur doivent être supprimés, y compris les pages par défaut installées après le serveur.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "category": "Information Gathering",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/04-Enumerate_Applications_on_Webserver",
                    "https://cwe.mitre.org/data/definitions/538.html",
                    "https://www.owasp.org/index.php/Full_Path_Disclosure"
                ],
                "locale": "fr",
                "title": "Divulgation des chemins et répertoires internes du serveur",
                "vulnType": "OWASP WSTG",
                "description": "<p>Ce fait se produit chaque fois que le chemin absolu d'un serveur Web ou d'une application hébergée sur celui-ci peut être déterminé à l'aide de n'importe quel mécanisme, comme l'envoi d'un message d'erreur, le suivi de l'envoi de paramètres, etc. Le répertoire absolu du serveur, où se trouve le contenu Web. stockés, peuvent être retrouvés.</p>",
                "observation": "<p>Confidentialité : Lire les données de l'application : L'attaquant peut être en mesure de lire des informations sensibles</p>",
                "remediation": "<p>Selon le type de faille qui a conduit à la divulgation, la meilleure marche à suivre variera. S'il a été obtenu suite à un message d'erreur, il est indispensable de remplacer ces messages d'erreur du serveur par un message générique qui se contente de signaler une situation anormale sans entrer plus en détail sur sa cause. Il est nécessaire de modifier la logique de l'application pour que seuls les chemins relatifs soient affichés ou pas du tout si ce chemin a été rendu public par un paramètre de l'application. Il est conseillé de remplacer les messages d'erreur du serveur par un message générique indiquant simplement que quelque chose est anormal sans entrer dans les détails de la raison. Le fichier de configuration doit être utilisé pour ce faire.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "category": "Information Gathering",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/04-Enumerate_Applications_on_Webserver",
                    "https://cwe.mitre.org/data/definitions/548.html"
                ],
                "locale": "fr",
                "title": "Liste du répertoire",
                "vulnType": "OWASP WSTG",
                "description": "<p>La liste de répertoires est une fonctionnalité qui, lorsqu'elle est activée, amène les serveurs Web à répertorier le contenu d'un répertoire lorsqu'aucun fichier d'index (par exemple index.php ou index.html) n'est présent. Par conséquent, si une requête est adressée à un répertoire dans lequel la liste des répertoires est activée et qu'il n'existe aucun fichier d'index, même s'il existe des fichiers provenant d'une application Web, le serveur Web envoie une liste de répertoires en réponse. Lorsque cela se produit, il y a un problème de fuite de données, et les attaquants peuvent utiliser ces données pour créer d'autres attaques, y compris des vulnérabilités directes comme XSS. Cela peut être utile dans les environnements de développement mais ne constitue pas une bonne pratique pour les serveurs de production. Le fait qu'un serveur Web permette de lister un répertoire a plusieurs implications en matière de sécurité : - Permet aux utilisateurs de télécharger certains fichiers ou d'accéder à certains répertoires qui ne seraient pas possibles autrement. - Il peut afficher des informations qui aident un attaquant à trouver des détails techniques sur le serveur Web. - Affiche tout le contenu du répertoire, sans faire de distinction entre les fichiers qui peuvent être publics et ceux qui doivent rester privés. Ceci est souvent accidentel, car un serveur Web par défaut affiche une liste de répertoires au cas où le fichier d'index serait invalide ou n'existerait pas.</p>",
                "observation": "<p>Confidentialité : lecture de fichiers ou de répertoires : l'exposition du contenu d'un répertoire peut permettre à un attaquant d'accéder au code source ou de fournir des informations utiles à l'attaquant pour concevoir des exploits, telles que les heures de création de fichiers ou toute information pouvant être codée dans le fichier. des noms. Le référencement du répertoire peut également compromettre des données privées ou confidentielles.</p>",
                "remediation": "<p>Configurez correctement. Les serveurs Web, qu'ils soient NGINX, Apache ou IIS, doivent être configurés de manière à ce que ni le listage des répertoires ni la navigation des utilisateurs dans les chemins ne soient autorisés. Par exemple, sur un serveur Web Apache, vous devez créer un fichier.htaccess dans le répertoire d'application approprié pour désactiver la liste des répertoires. Les lignes suivantes peuvent être ajoutées au fichier httpd.conf ou remplacées par celles déjà présentes : <Directory /{YOUR DIRECTORY}> Options FollowSymLinks </Directory> Comme vous pouvez le voir dans l'exemple de code ci-dessus, afin de désactiver en toute sécurité la fonctionnalité de liste de répertoires sur un serveur Web Apache, vous devez supprimer les instructions Indexes et MultiViews.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
        "category": "SSL/TLS encryption",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/04-Enumerate_Applications_on_Webserver",
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security",
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption",
                    "https://cwe.mitre.org/data/definitions/311.html",
                    "https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html",
                    "https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html",
                    "https://wiki.owasp.org/index.php/Testing_for_Weak_SSL/TLS_Ciphers,_Insufficient_Transport_Layer_Protection_(OTG-CRYPST-001)"
                ],
                "locale": "fr",
                "title": "Absence de SSL/TLS encryption",
                "vulnType": "OWASP WSTG",
                "description": "<p>Au lieu du protocole HTTPs, HTTP est utilisé pour communiquer avec le serveur Web. Pour empêcher un attaquant de lire ou de modifier les données échangées entre le client et le serveur, celles-ci doivent être cryptées et protégées. La méthode la plus courante pour ce faire consiste à utiliser HTTPS, qui remplace le protocole Secure Socket Layer (SSL) par le protocole Transport Layer Security (TLS). En affichant un certificat numérique de confiance, le serveur peut utiliser TLS pour montrer au client qu'il est connecté au bon serveur. Au fil des années, un grand nombre de faiblesses cryptographiques ont été identifiées dans les protocoles SSL et TLS, ainsi que dans les chiffrements qu’ils utilisent. En outre, bon nombre des implémentations de ces protocoles présentent également de graves vulnérabilités. Par conséquent, il est important de vérifier que les sites implémentent non seulement TLS, mais qu’ils le font de manière sécurisée.</p>",
                "observation": "<p>Confidentialité : lecture des données de l'application : un attaquant peut être en mesure de déchiffrer les données à l'aide d'attaques par force brute.</p>",
                "remediation": "<p>Le serveur Web doit être configuré pour prendre en charge HTTP. De plus, il est pratique d'utiliser l'en-tête HSTS et de basculer toutes les requêtes HTTP vers le protocole HTTPs.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
        "category": "SSL/TLS encryption",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security",
                    "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/03-Testing_for_Sensitive_Information_Sent_via_Unencrypted_Channels",
                    "https://cwe.mitre.org/data/definitions/16.html",
                    "https://cwe.mitre.org/data/definitions/319.html",
                    "https://capec.mitre.org/data/definitions/117.html"
                ],
                "locale": "fr",
                "title": "Contenu mixte",
                "vulnType": "OWASP WSTG",
                "description": "<p>Le contenu téléchargé à l'aide du protocole HTTP est utilisé par l'application Web, qui utilise le protocole HTTPs. Étant donné que toutes les données téléchargées via HTTP peuvent être interceptées et modifiées par un attaquant, cette pratique est considérée comme insuffisante.</p>",
                "observation": "<p>Confidentialité : Lire les données de l'application : L'attaquant peut être en mesure de lire des informations sensibles</p>",
                "remediation": "<p>Le serveur Web doit être configuré pour prendre en charge HTTP. De plus, il est pratique d'utiliser l'en-tête HSTS et de basculer toutes les requêtes HTTP vers le protocole HTTPs.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
        "category": "SSL/TLS encryption",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption",
                    "https://cwe.mitre.org/data/definitions/310.html",
                    "https://cwe.mitre.org/data/definitions/327.html"
                ],
                "locale": "fr",
                "title": "Algorithmes de chiffrement faibles",
                "vulnType": "OWASP WSTG",
                "description": "<p>De nombreuses failles dans la configuration du service SSL/TLS sur le serveur Web pourraient conduire à une communication non sécurisée entre le client et le serveur. Les algorithmes de chiffrement utilisés par le service SSL/TLS exécuté sur le serveur sont considérés comme faibles ou présentant des vulnérabilités connues.</p>",
                "observation": "<ul><li><p>Confidentialité : lire les données de l'application : l'attaquant peut être en mesure de lire des informations sensibles. - Contrôle d'accès : modifier les données de l'application : un attaquant peut inciter un utilisateur à effectuer des actions masquées et cachées à la vue de l'utilisateur. L'impact varie considérablement en fonction de la fonctionnalité de l'application sous-jacente. Par exemple, dans une application de réseau social, le détournement de clics pourrait être utilisé pour inciter l’utilisateur à modifier les paramètres de confidentialité.</p></li></ul>",
                "remediation": "<p>Autorisez uniquement les connexions TLS avec un chiffrement considéré comme sécurisé dans les versions 1.2 ou 1.3.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
        "category": "SSL/TLS encryption",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security",
                    "https://cwe.mitre.org/data/definitions/326.html"
                ],
                "locale": "fr",
                "title": "Utilisation de versions obsolètes du protocole SSL/TLS",
                "vulnType": "OWASP WSTG",
                "description": "<p>Pour empêcher un attaquant de lire ou de modifier les données échangées entre le client et le serveur, celles-ci doivent être cryptées et protégées. La méthode la plus populaire pour ce faire est HTTPS, qui remplace le protocole obsolète Secure Socket Layer (SSL) par le protocole Transport Layer Security (TLS). En affichant un certificat numérique de confiance, le serveur peut utiliser TLS pour montrer au client qu'il est connecté au bon serveur.</p>",
                "observation": "<p>Confidentialité : Lire les données de l'application : L'attaquant peut être en mesure de lire des informations sensibles</p>",
                "remediation": "<p>Sur le serveur Web, les variantes non sécurisées du protocole SSL/TLS doivent être désactivées.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
        "category": "SSL/TLS encryption",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security"
                ],
                "locale": "fr",
                "title": "Renégociation sécurisée initiée par le client",
                "vulnType": "OWASP WSTG",
                "description": "<p>Côté serveur par rapport au côté client, davantage de ressources sont utilisées lors de la négociation de connexion SSL/TLS. Dans le cas où le serveur autorise le client à demander une renégociation de connexion, un attaquant pourrait profiter de cette fonctionnalité pour envoyer de nombreuses requêtes de négociation, utilisant les ressources du serveur et pouvant entraîner un déni de service (DoS).</p>",
                "observation": "<p>Confidentialité : Lire les données de l'application : L'attaquant peut être en mesure de lire des informations sensibles</p>",
                "remediation": "<p>Pour corriger la vulnérabilité, il est conseillé d'appliquer le correctif le plus récent. Il est indispensable de mettre à jour vers la version 0.9.8l ou ultérieure sur les systèmes exécutant OpenSSL. D'un autre côté, il est également possible de désactiver le lancement de la renégociation par le client à titre d'atténuation sans avoir besoin d'une mise à jour.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N",
        "category": "SSL/TLS encryption",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/01-Testing_for_Weak_Transport_Layer_Security",
                    "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/09-Testing_for_Weak_Cryptography/04-Testing_for_Weak_Encryption",
                    "https://cwe.mitre.org/data/definitions/16.html"
                ],
                "locale": "fr",
                "title": "Certificat numérique non fiable",
                "vulnType": "OWASP WSTG",
                "description": "<p>Le certificat numérique du serveur n'est pas sécurisé et peu fiable en raison de certains paramètres incorrects, ce qui augmente le risque de confidentialité ou de fiabilité du système.</p>",
                "observation": "<ul><li><p>Autre : Impact technique : varie selon le contexte</p></li></ul>",
                "remediation": "<p>Il est conseillé de créer un certificat numérique que les navigateurs reconnaissent comme fiable (délivré par une autorité reconnue, dans la durée de validité et avec le nom commun du certificat égal au nom du site Web proposant les services).</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N",
        "category": "SSL/TLS encryption",
        "details": [
            {
                "references": [
                    "https://cwe.mitre.org/data/definitions/299.html"
                ],
                "locale": "fr",
                "title": "Vérification incorrecte de la révocation du certificat (agrafage OCSP)",
                "vulnType": "OWASP WSTG",
                "description": "<p>Pour arrêter les attaques de l'homme du milieu contre les utilisateurs de vos applications, vous devez toujours pouvoir rappeler rapidement ces certificats chaque fois que votre autorité de certification perd la confiance.</p>",
                "observation": "<p>Contrôle d'accès : obtenir des privilèges ou assumer une identité : la confiance peut être attribuée à une entité qui n'est pas celle qu'elle prétend être. - Autre : Autre : Des données provenant d'une source non fiable (et éventuellement malveillante) peuvent être intégrées. - Confidentialité : lecture des données d'application : les données peuvent être divulguées à une entité se faisant passer pour une entité de confiance, entraînant la divulgation d'informations.</p>",
                "remediation": "<p>Le fichier de clés sur l'ordinateur de signature sécurisé, où sont également stockées les copies signées et non signées de la zone, contient l'ancre de confiance pour la zone donnée. La procédure de signature inclut une création automatique de ce fichier. Une liste de révocation de certificats (CRL) est une liste créée et signée par une autorité de certification (CA), qui contient les numéros de série des certificats émis par cette autorité de certification et actuellement révoqués. Outre le numéro de série des certifications révoquées, la CRL contient également le motif de la révocation de chaque certificat et l'heure à laquelle le certificat a été révoqué. Le numéro de série de chaque certificat révoqué est conservé dans la base de données des autorités de certification et publié dans la CRL jusqu'à l'expiration du certificat. L'entrée CRL du certificat révoqué est supprimée une fois son certificat expiré, et l'autorité de certification est alors libre de supprimer le certificat de sa base de données. Le certificat révoqué reste généralement dans la CRL pendant une période de publication après l'expiration du certificat. Vous devez toujours avoir accès à ces connaissances afin de pouvoir agir rapidement.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "SSL/TLS encryption",
        "details": [
            {
                "references": [
                    "https://cwe.mitre.org/data/definitions/299.html"
                ],
                "locale": "fr",
                "title": "Certificats d'autorité de certification",
                "vulnType": "OWASP WSTG",
                "description": "<p>Une organisation qui émet des certificats numériques est appelée autorité de certification (CA) dans le domaine de la cryptographie. Un certificat numérique atteste que le sujet nommé du certificat est propriétaire d'une clé publique. Une autorité de certification peut parfois échouer et être supprimée du navigateur. Si votre application utilise un certificat émis par cette autorité de certification, cela entraînera des connexions TLS non fiables. Un certificat d'identité signé par la même entité dont il certifie l'identité est appelé certificat auto-signé. Cette phrase n’a rien à voir avec qui ou quoi était responsable de l’exécution du processus de signature. Un certificat auto-signé est un certificat signé à l'aide d'une clé privée appartenant à l'émetteur. Dans les arrangements typiques d'infrastructure à clé publique (PKI), une signature numérique provenant d'une autorité de certification (CA) atteste qu'un certificat de clé publique particulier est valide. Chaque autorité de certification possède une ou plusieurs clés racine ; et les certificats associés à ces clés publiques sont des « ancres de confiance » qui utilisent un type spécial de certificats auto-signés. L'établissement de la confiance du certificat racine de l'autorité de certification dépend de procédures allant au-delà de la vérification de sa signature numérique.</p>",
                "observation": "<p>Contrôle d'accès : obtenir des privilèges ou assumer une identité : la confiance peut être attribuée à une entité qui n'est pas celle qu'elle prétend être. - Autre : Autre : Des données provenant d'une source non fiable (et éventuellement malveillante) peuvent être intégrées. - Confidentialité : lecture des données d'application : les données peuvent être divulguées à une entité se faisant passer pour une entité de confiance, entraînant la divulgation d'informations.</p>",
                "remediation": "<p>Installez un certificat de confiance provenant d'une autorité de certification racine réputée sur le serveur.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N",
        "category": "Configuration and Deploy Management",
        "details": [
            {
                "references": [
                    "https://cwe.mitre.org/data/definitions/306.html"
                ],
                "locale": "fr",
                "title": "Assurer la sécurité globale",
                "vulnType": "OWASP WSTG",
                "description": "<p>En raison du fait qu'il fait l'objet de beaucoup d'attention lors du développement, le mécanisme d'authentification principal est souvent une bonne fonctionnalité renforcée. Ce n'est généralement pas le cas, cependant, pour les mécanismes d'authentification secondaires tels que les fonctionnalités d'oubli de mot de passe ou d'autres itinéraires alternatifs qui pourraient aboutir à une authentification réussie de l'application.</p>",
                "observation": "<ul><li><p>Autre : Autre : l'exposition d'une fonctionnalité critique fournit essentiellement à un attaquant le niveau de privilège de cette fonctionnalité. Les conséquences dépendront de la fonctionnalité associée, mais elles peuvent aller de la lecture ou de la modification de données sensibles, à l'accès à des fonctionnalités administratives ou autres fonctionnalités privilégiées, voire éventuellement à l'exécution de code arbitraire.</p></li></ul>",
                "remediation": "<p>Assurez-vous que toutes les fonctionnalités d'authentification de l'identité du compte (telles que le profil de mise à jour, le mot de passe oublié, le jeton désactivé/perdu, le service d'assistance ou l'IVR) qui pourraient vous permettre de retrouver l'accès à votre compte sont au moins aussi sécurisées contre le piratage que la méthode d'authentification principale.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Configuration and Deploy Management",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/01-Test_Network_Infrastructure_Configuration",
                    "https://cwe.mitre.org/data/definitions/477.html"
                ],
                "locale": "fr",
                "title": "Version du système d'exploitation obsolète (vulnérabilités associées connues)",
                "vulnType": "OWASP WSTG",
                "description": "<p>Lorsque la version du système d'exploitation du serveur exécutant l'application peut être déterminée, ce problème se produit. Tout type d'information relative à la technologie qui sous-tend l'application Web doit toujours être gardée secrète afin d'empêcher ou d'empêcher qu'une fois cette information connue, des attaques ciblées contre ce logiciel puissent être planifiées.</p>",
                "observation": "<ul><li><p>Autre : Dégradation de la qualité : L'attaquant utilise une fonction qui n'est pas mise à jour</p></li></ul>",
                "remediation": "<p>Il est conseillé de mettre à jour le système d'exploitation vers la version la plus récente.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Configuration and Deploy Management",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/01-Test_Network_Infrastructure_Configuration",
                    "https://cwe.mitre.org/data/definitions/477.html"
                ],
                "locale": "fr",
                "title": "Dépendances et bibliothèques obsolètes",
                "vulnType": "OWASP WSTG",
                "description": "<p>Les chercheurs en sécurité signalent et stockent les vulnérabilités qu'ils trouvent dans les bibliothèques, modules, frameworks, plates-formes ou systèmes d'exploitation dans la liste CVE. Étant donné que la liste est accessible à tous, elle permet d'accéder à tout attaquant visant à compromettre une application Web obsolète.</p>",
                "observation": "<ul><li><p>Autre : Réduire la maintenabilité : l'attaquant pourrait trouver des vulnérabilités de composants obsolètes et les utiliser pour exploiter de nouveaux vecteurs d'attaque.</p></li></ul>",
                "remediation": "<p>Le principal conseil est de toujours utiliser les dépendances et bibliothèques les plus récentes proposées par le constructeur. De plus, il est fortement conseillé d'utiliser des outils tels que la vérification des dépendances OWASP lors de l'exécution des bibliothèques et des modules de l'application via le SDLC. Ce programme analyse les bibliothèques et modules importés à la recherche de CVE connus.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Configuration and Deploy Management",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/05-Enumerate_Infrastructure_and_Application_Admin_Interfaces",
                    "https://cwe.mitre.org/data/definitions/16.html"
                ],
                "locale": "fr",
                "title": "Identification des panels de gestion",
                "vulnType": "OWASP WSTG",
                "description": "<p>Il n'est pas conseillé que les panneaux d'administration ou les panneaux d'authentification de diverses applications soient accessibles publiquement sur Internet. Par conséquent, il serait pratique de restreindre l'accès aux panneaux d'administration ou d'authentification aux connexions VPN (Virtual Private Network) lorsque cela est possible.</p>",
                "observation": "<p>Confidentialité : Lire les données de l'application : L'attaquant peut être en mesure de lire des informations sensibles</p>",
                "remediation": "<p>Il est conseillé d'utiliser des VPN pour se connecter aux ressources de l'organisation au lieu d'ouvrir des panneaux d'administration ou d'authentification à Internet.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Configuration and Deploy Management",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/05-Enumerate_Infrastructure_and_Application_Admin_Interfaces",
                    "https://cwe.mitre.org/data/definitions/16.html"
                ],
                "locale": "fr",
                "title": "Configuration du serveur non renforcée",
                "vulnType": "OWASP WSTG",
                "description": "<p>Toute partie de la pile d'applications, y compris les services réseau, la plate-forme, le serveur Web, le serveur d'applications, la base de données, les frameworks, le code personnalisé, les machines virtuelles préinstallées, les conteneurs ou le stockage, est susceptible d'être mal configurée en matière de sécurité. Les attaquants obtiennent fréquemment un accès non autorisé à certaines données ou fonctionnalités du système grâce à ces failles. De telles failles peuvent parfois compromettre l’ensemble du système. Les exigences en matière d’application et de protection des données déterminent l’impact commercial.</p>",
                "observation": "<p>Confidentialité : Lire les données de l'application : L'attaquant peut être en mesure de lire des informations sensibles</p>",
                "remediation": "<p>Mettre en œuvre des procédures d'installation sécurisées, telles que : - Un processus de renforcement reproductible qui permet de déployer rapidement et facilement un autre environnement correctement verrouillé. Les environnements de développement, d'assurance qualité et de production doivent tous être configurés de manière identique, avec des informations d'identification différentes utilisées dans chaque environnement. Ce processus doit être automatisé pour minimiser les efforts requis pour configurer un nouvel environnement sécurisé. - Une plate-forme minimale sans fonctionnalités, composants, documentation et échantillons inutiles. Supprimez ou n’installez pas les fonctionnalités et frameworks inutilisés. - Une tâche consistant à examiner et mettre à jour les configurations appropriées à toutes les notes de sécurité, mises à jour et correctifs dans le cadre du processus de gestion des correctifs. En particulier, examinez les autorisations de stockage dans le cloud. - Une architecture d'application segmentée qui assure une séparation efficace et sécurisée entre les composants ou les locataires, avec segmentation, conteneurisation ou groupes de sécurité cloud (ACL). - Envoi de directives de sécurité aux clients, par exemple des en-têtes de sécurité. - Un processus automatisé pour vérifier l'efficacité des configurations et des paramètres dans tous les environnements.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Configuration and Deploy Management",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/02-Test_Application_Platform_Configuration",
                    "https://cwe.mitre.org/data/definitions/532.html"
                ],
                "locale": "fr",
                "title": "Informations sensibles dans les journaux accessibles",
                "vulnType": "OWASP WSTG",
                "description": "<p>Un journal est un enregistrement des activités qui se déroulent au sein des réseaux et des systèmes d'une organisation. Les journaux sont constitués d'entrées de journal et chaque entrée d'un journal contient des détails sur un événement spécifique qui s'est produit dans un système ou un réseau.</p>",
                "observation": "<p>Confidentialité : Lire les données de l'application : L'attaquant peut être en mesure de lire des informations sensibles</p>",
                "remediation": "<p>Il est recommandé de conserver les journaux dans un emplacement distinct et non sur le serveur Web lui-même. Cela facilite également l'agrégation de journaux provenant de différentes sources qui font référence à la même application (comme ceux d'une batterie de serveurs Web) et facilite également l'analyse des journaux (qui peut être gourmande en CPU) sans affecter le serveur lui-même. Il est également recommandé de mettre en place une rotation des logs garantissant que : - Les logs sont conservés pendant la durée définie dans la politique de sécurité, ni plus ni moins. - Les journaux sont compressés une fois la rotation effectuée (c'est pratique, car cela signifie que davantage de journaux seront stockés pour le même espace disque disponible). - Les autorisations du système de fichiers des fichiers journaux pivotés sont identiques (ou plus strictes) que celles des fichiers journaux eux-mêmes. Par exemple, les serveurs Web devront écrire dans les journaux qu'ils utilisent, mais ils n'ont pas réellement besoin d'écrire dans les journaux en rotation, ce qui signifie que les autorisations des fichiers peuvent être modifiées au moment de la rotation pour empêcher le processus du serveur Web de les modifier. - Certains serveurs peuvent effectuer une rotation des journaux lorsqu'ils atteignent une certaine taille. Si cela se produit, assurez-vous qu'un attaquant ne peut pas forcer la rotation du journal pour masquer sa trace. Enfin, mettez en place un contrôle d'accès afin que les informations du journal des événements ne soient jamais visibles pour les utilisateurs finaux et analysez les journaux périodiquement, par exemple en fonction des messages d'erreur : - Messages d'erreur 40x (introuvable). Un grand nombre d'entre eux provenant de la même source pourraient indiquer qu'un outil d'analyse CGI est utilisé contre le serveur Web. - 50x messages (erreur du serveur). Cela peut indiquer qu'un attaquant abuse de parties de l'application qui échouent de manière inattendue. Par exemple, les premières étapes d’une attaque par injection SQL produiront ces messages d’erreur lorsque la requête SQL n’est pas bien construite et que son exécution échoue dans la base de données principale. Les statistiques ou l'analyse des journaux ne doivent pas être générées ou stockées sur le même serveur qui produit les journaux. Dans le cas contraire, un attaquant pourrait, via une vulnérabilité du serveur web ou une mauvaise configuration, y accéder et récupérer des informations similaires à celles qui seraient révélées par les fichiers journaux eux-mêmes.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Configuration and Deploy Management",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/04-Review_Old_Backup_and_Unreferenced_Files_for_Sensitive_Information",
                    "https://cwe.mitre.org/data/definitions/200.html",
                    "https://cwe.mitre.org/data/definitions/530.html"
                ],
                "locale": "fr",
                "title": "Identification du fichier de sauvegarde",
                "vulnType": "OWASP WSTG",
                "description": "<p>Les fichiers qui ne sont pas liés à l'application mais qui sont créés à la suite de la modification de fichiers d'application, après avoir effectué des sauvegardes en cours d'utilisation ou en laissant des fichiers obsolètes ou non référencés dans l'arborescence Web constituent une source importante de vulnérabilité. L'édition à la volée et d'autres tâches administratives sur les serveurs Web de production peuvent laisser involontairement des copies de sauvegarde créées automatiquement par l'éditeur lors de leur édition ou par l'administrateur lors de la compression d'un groupe de fichiers pour créer une sauvegarde. La modification de fichiers peut laisser des copies de sauvegarde automatiques de type .bak, .sav, .old ou ~. Le serveur Web n'a pas défini par défaut d'interprétation pour ce type de fichiers, le résultat est donc généralement soit d'afficher leur contenu, soit de procéder à leur téléchargement.</p>",
                "observation": "<p>Confidentialité : Lire les données de l'application : L'attaquant peut être en mesure de lire des informations sensibles</p>",
                "remediation": "<p>Pour supprimer le risque, il est nécessaire de supprimer le fichier de sauvegarde découvert. Il est nécessaire de rechercher régulièrement sur le serveur les fichiers portant les extensions.bak,.bac,.sav,.old,.BAK,.BAC,.SAV,.OLD,.tar,.gz et.tgz et de les supprimer de le serveur afin de remédier de manière générale à ce type de défaut. Afin d'éviter que le fichier soit téléchargé ou que le contenu du fichier soit affiché par le navigateur, il est également conseillé de configurer le serveur web pour pouvoir comprendre ces extensions. Si la racine du document se trouve sur un système de fichiers qui utilise cette technologie, les instantanés du système de fichiers ne doivent pas être accessibles via le Web. Configurez votre serveur Web pour refuser l'accès à de tels répertoires, par exemple, dans Apache, une directive d'emplacement comme celle-ci doit être utilisée : <Location ~ \".snapshot\"> Order deny,allow Deny from all </Location></p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Configuration and Deploy Management",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/06-Test_HTTP_Methods",
                    "https://cwe.mitre.org/data/definitions/16.html"
                ],
                "locale": "fr",
                "title": "Méthodes HTTP non sécurisées activées",
                "vulnType": "OWASP WSTG",
                "description": "<p>Diverses techniques sont disponibles via HTTP pour effectuer des opérations sur le serveur Web (la norme HTTP 1.1 les appelle méthodes, mais elles sont aussi communément décrites comme des verbes). Bien que GET et POST soient de loin les moyens les plus populaires pour accéder aux données d'un serveur Web, HTTP prend également en charge un certain nombre de méthodes supplémentaires, moins connues. Si le serveur Web est mal configuré, certains d’entre eux pourraient être utilisés de manière malveillante.</p>",
                "observation": "<ul><li><p>Autre : Impact technique : varie selon le contexte</p></li></ul>",
                "remediation": "<p>Les méthodes jugées superflues dans la configuration du serveur doivent être désactivées.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Configuration and Deploy Management",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security",
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/12-Test_for_Content_Security_Policy",
                    "https://cwe.mitre.org/data/definitions/16.html",
                    "https://cwe.mitre.org/data/definitions/693.html",
                    "https://wiki.owasp.org/index.php/OWASP_Secure_Headers_Project",
                    "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"
                ],
                "locale": "fr",
                "title": "Manque d'en-têtes HTTP de sécurité",
                "vulnType": "OWASP WSTG",
                "description": "<p>Les en-têtes de sécurité sont implémentés sous forme d'en-têtes de réponse HTTP qui limitent le potentiel d'exploitation des vulnérabilités côté client en indiquant au navigateur comment se comporter dans des circonstances spécifiques. La configuration de sécurité complète nécessaire pour établir une connexion sécurisée avec le client n'est pas présente dans les réponses du serveur.</p>",
                "observation": "<ul><li><p>Contrôle d'accès : mécanisme de protection contre le contournement : les contrôles d'accès pour des données ou fonctionnalités utilisateur spécifiques peuvent être contournés.</p></li></ul>",
                "remediation": "<p>La mise en œuvre de tous les en-têtes HTTP de sécurité dans les réponses du serveur est recommandée. Les valeurs recommandées sont : - Strict-Transport-Security (HSTS) : max-age=31536000 ; includeSubDomains. - Politique de sécurité du contenu : default-src https : 'self'. - X-XSS-Protection:1 - X-Frame-Options : 'DENY' (si ce n'est pas possible, 'SAMEORIGIN'). - Options X-Content-Type : nosniff. - Cache-Control : pas de magasin. - Referrer-Policy : 'no-referrer' (ou 'même-origine'). - Permissions-Policy : Définir les fonctions minimales autorisées et refuser les autres.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Configuration and Deploy Management",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security",
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/12-Test_for_Content_Security_Policy",
                    "https://cwe.mitre.org/data/definitions/16.html",
                    "https://cwe.mitre.org/data/definitions/693.html",
                    "https://wiki.owasp.org/index.php/OWASP_Secure_Headers_Project",
                    "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"
                ],
                "locale": "fr",
                "title": "Absence d’en-tête HSTS (HTTP Strict Transport Security)",
                "vulnType": "OWASP WSTG",
                "description": "<p>L'en-tête HTTP « stricte transport security » (HSTS) est utilisé pour contrecarrer les tentatives d'interception de communications, de cookies, etc. Ce mécanisme permet à un serveur Web de déclarer que seules les connexions HTTP sécurisées (HTTP sur TLS/SSL) sont autorisées pour la communication du navigateur.</p>",
                "observation": "<p>Contrôle d'accès : obtenir des privilèges ou assumer une identité : un attaquant pourrait obtenir un accès non autorisé au système en récupérant les informations d'authentification d'un utilisateur légitime.</p>",
                "remediation": "<p>Définissez l'en-tête HTTP Strict-Transport-Security, qui demande au navigateur client de rediriger automatiquement les requêtes reçues via le protocole HTTP vers le protocole sécurisé HTTPS plutôt que d'utiliser ou de forcer un protocole non sécurisé. <Sécurité-Transport-Stricte : âge-max=60 000 ; inclure des sous-domaines></p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Configuration and Deploy Management",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security",
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/12-Test_for_Content_Security_Policy",
                    "https://cwe.mitre.org/data/definitions/16.html",
                    "https://cwe.mitre.org/data/definitions/693.html",
                    "https://wiki.owasp.org/index.php/OWASP_Secure_Headers_Project",
                    "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"
                ],
                "locale": "fr",
                "title": "Absence d'en-tête X-Frame-Options",
                "vulnType": "OWASP WSTG",
                "description": "<p>Un utilisateur est amené à utiliser des fonctionnalités d'un site Web caché en cliquant sur un autre contenu d'un faux site Web en utilisant la vulnérabilité Clickjacking. La méthode est basée sur l'intégration d'un bouton ou d'un lien caché, par exemple, dans une iframe, sur une ou plusieurs pages Web exploitables et visibles. Le contenu de la page Web leurre anticipée par l'utilisateur est recouvert par l'iframe.</p>",
                "observation": "<ul><li><p>Contrôle d'accès : obtenir des privilèges ou assumer une identité : un attaquant pourrait obtenir des privilèges en modifiant ou en lisant directement des données critiques, ou en accédant à des fonctionnalités privilégiées et insuffisamment protégées.</p></li></ul>",
                "remediation": "<p>L'en-tête X-Frame-Options est pris en charge par la plupart des navigateurs Web contemporains. Il est conseillé de configurer le serveur Web de manière à ce que cet en-tête soit activé pour toutes les pages Web. L'option SAMEORIGIN doit être utilisée si la page est censée contenir uniquement du code provenant du serveur.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Configuration and Deploy Management",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security",
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/12-Test_for_Content_Security_Policy",
                    "https://cwe.mitre.org/data/definitions/16.html",
                    "https://cwe.mitre.org/data/definitions/693.html",
                    "https://wiki.owasp.org/index.php/OWASP_Secure_Headers_Project",
                    "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"
                ],
                "locale": "fr",
                "title": "Absence d’en-tête Content Security Policy (CSP)",
                "vulnType": "OWASP WSTG",
                "description": "<p>Un en-tête de réponse HTTP qui augmente la sécurité est appelé Content-Security-Policy. À l'aide de cet en-tête, vous pouvez limiter les ressources que le navigateur peut charger, notamment JavaScript, CSS, etc.</p>",
                "observation": "<p>Contrôle d'accès : obtenir des privilèges ou assumer une identité : un attaquant pourrait obtenir des privilèges en modifiant ou en lisant directement des données critiques, ou en accédant à des fonctionnalités privilégiées et insuffisamment protégées. - Contrôle d'accès : mécanisme de protection contre le contournement : les contrôles d'accès pour des données ou fonctionnalités utilisateur spécifiques peuvent être contournés. - Confidentialité : lecture des données d'application : les données peuvent être divulguées à une entité se faisant passer pour une entité de confiance, entraînant la divulgation d'informations. - Contrôle d'accès : modifier les données de l'application : un attaquant peut inciter un utilisateur à effectuer des actions masquées et cachées à la vue de l'utilisateur. L'impact varie considérablement en fonction de la fonctionnalité de l'application sous-jacente. Par exemple, dans une application de réseau social, le détournement de clics pourrait être utilisé pour inciter l’utilisateur à modifier les paramètres de confidentialité.</p>",
                "remediation": "<p>En incluant l'en-tête Content-Security-Policy dans les en-têtes de réponse HTTP, qui indique au navigateur d'appliquer les politiques souhaitées, vous pouvez activer CSP sur un site Web. Politique de sécurité du contenu : script-src https://example.com:*;&gt;</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Configuration and Deploy Management",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security",
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/12-Test_for_Content_Security_Policy",
                    "https://cwe.mitre.org/data/definitions/16.html",
                    "https://cwe.mitre.org/data/definitions/693.html",
                    "https://wiki.owasp.org/index.php/OWASP_Secure_Headers_Project",
                    "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"
                ],
                "locale": "fr",
                "title": "Absence d'en-tête Cache Control",
                "vulnType": "OWASP WSTG",
                "description": "<p>Les directives pour les mécanismes de mise en cache sont spécifiées dans l'en-tête HTTP Cache-Control.</p>",
                "observation": "<ul><li><p>Contrôle d'accès : mécanisme de protection contre le contournement : les contrôles d'accès pour des données ou fonctionnalités utilisateur spécifiques peuvent être contournés.</p></li></ul>",
                "remediation": "<p>Créez un en-tête Cache-Control sur votre serveur Web avec les instructions nécessaires. La valeur de l'en-tête Pragma doit être sans cache et la valeur Cache-Control doit être sans cache, sans magasin si la page contient des informations sensibles.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Configuration and Deploy Management",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security",
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/12-Test_for_Content_Security_Policy",
                    "https://cwe.mitre.org/data/definitions/16.html",
                    "https://cwe.mitre.org/data/definitions/693.html",
                    "https://wiki.owasp.org/index.php/OWASP_Secure_Headers_Project",
                    "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"
                ],
                "locale": "fr",
                "title": "Absence d'en-tête Pragma",
                "vulnType": "OWASP WSTG",
                "description": "<p>L'en-tête Pragma est un en-tête spécifique à l'implémentation qui peut avoir un impact sur la chaîne requête-réponse de plusieurs manières. Lorsque l'en-tête HTTP/1.1 Cache-Control n'est pas encore présent, il est utilisé pour la compatibilité descendante avec les versions antérieures du cache HTTP/1.0.</p>",
                "observation": "<ul><li><p>Contrôle d'accès : mécanisme de protection contre le contournement : les contrôles d'accès pour des données ou fonctionnalités utilisateur spécifiques peuvent être contournés.</p></li></ul>",
                "remediation": "<p>L'en-tête Cache-Control est le moyen idéal pour spécifier une politique de mise en cache lorsqu'au moins HTTP/1.1 est utilisé dans les réponses du serveur. L'en-tête de Pragma peut être supprimé.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Configuration and Deploy Management",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/07-Test_HTTP_Strict_Transport_Security",
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/12-Test_for_Content_Security_Policy",
                    "https://cwe.mitre.org/data/definitions/16.html",
                    "https://cwe.mitre.org/data/definitions/693.html",
                    "https://wiki.owasp.org/index.php/OWASP_Secure_Headers_Project",
                    "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"
                ],
                "locale": "fr",
                "title": "Absence d'en-tête de stratégie de fonctionnalité",
                "vulnType": "OWASP WSTG",
                "description": "<p>Les développeurs Web peuvent activer, désactiver et modifier de manière sélective le comportement d'API et de fonctionnalités Web spécifiques dans le navigateur à l'aide de l'en-tête Feature-Policy. Notez que cet en-tête a été divisé en Permissions-Policy et Document-Policy, et qu'il sera considéré comme obsolète une fois que toutes les fonctionnalités concernées auront été éliminées de Feature-Policy.</p>",
                "observation": "<ul><li><p>Contrôle d'accès : mécanisme de protection contre le contournement : les contrôles d'accès pour des données ou fonctionnalités utilisateur spécifiques peuvent être contournés.</p></li></ul>",
                "remediation": "<p>Vous trouverez ci-dessous un exemple de la manière d'ajouter l'en-tête Feature-Policy aux réponses du serveur Web : <Feature-Policy: vibrate 'self'; média utilisateur * ; sync-xhr 'self' https://example.com></p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Configuration and Deploy Management",
        "details": [
            {
                "references": [
                    "https://cwe.mitre.org/data/definitions/116.html"
                ],
                "locale": "fr",
                "title": "Absence d'en-tête de politique de référence",
                "vulnType": "OWASP WSTG",
                "description": "<p>Les requêtes effectuées à partir d'un document et les navigations à partir de ce document sont associées à un en-tête Referer. Bien que l'en-tête puisse être supprimé pour les liens de type noreferrer, les auteurs peuvent souhaiter contrôler l'en-tête Referer plus directement pour un certain nombre de raisons : - Confidentialité : un site de réseau social possède une page de profil pour chacun de ses utilisateurs, et les utilisateurs ajoutent des hyperliens depuis leur page de profil vers leurs groupes préférés. Le site de réseau social pourrait ne pas souhaiter divulguer l'URL du profil de l'utilisateur aux sites Web du groupe lorsque d'autres utilisateurs suivent ces hyperliens (car les URL du profil pourraient révéler l'identité du propriétaire du profil). Certains sites de réseaux sociaux pourraient toutefois souhaiter informer les sites Web du groupe que les liens proviennent du site de réseautage social, mais sans révéler quel profil d'utilisateur spécifique contient les liens. - Sécurité : une application Web utilise HTTPS et un identifiant de session basé sur une URL. L'application Web peut souhaiter créer un lien vers des ressources HTTPS sur d'autres sites Web sans divulguer l'identifiant de session de l'utilisateur dans l'URL. Alternativement, une application Web peut utiliser des URL qui elles-mêmes confèrent certaines fonctionnalités. Le contrôle du référent peut aider à empêcher la fuite de ces URL de fonctionnalités via les en-têtes de référent. Notez qu'il existe d'autres moyens de fuite des URL de fonctionnalités, et le contrôle du référent ne suffit pas pour contrôler toutes ces fuites potentielles. - Trackback : un blog hébergé via HTTPS peut souhaiter créer un lien vers un blog hébergé via HTTP et recevoir des liens de rétrolien.</p>",
                "observation": "<ul><li><p>Contrôle d'accès : mécanisme de protection contre le contournement : les contrôles d'accès pour des données ou fonctionnalités utilisateur spécifiques peuvent être contournés.</p></li></ul>",
                "remediation": "<p>Politique de référence La quantité de données de référence, transmises via l'en-tête Referer, qui doivent être incluses dans les requêtes est contrôlée par l'en-tête HTTP. L'en-tête Referer a beaucoup de bonnes intentions, mais il a également des effets défavorables sur la sécurité et la confidentialité des utilisateurs. Les valeurs suivantes doivent être configurées dans la politique : Referrer-Policy : no-referrer Referrer-Policy : même origine</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Configuration and Deploy Management",
        "details": [
            {
                "references": [
                    "https://cwe.mitre.org/data/definitions/116.html"
                ],
                "locale": "fr",
                "title": "Absence d'en-tête X-Content-Type-Options",
                "vulnType": "OWASP WSTG",
                "description": "<p>Afin de se protéger contre le téléchargement de fichiers réfléchissants et d'autres types d'injections, certains rappels d'API doivent avoir des en-têtes de sécurité correctement configurés. De plus, vérifiez si les entrées de l'utilisateur sont reflétées dans la réponse de l'API et si elles sont dynamiques. Si tel est le cas, afin d'arrêter les attaques XSS et d'exécution de méthode de même origine, vous devez valider et coder l'entrée.</p>",
                "observation": "<ul><li><p>Contrôle d'accès : mécanisme de protection contre le contournement : les contrôles d'accès pour des données ou fonctionnalités utilisateur spécifiques peuvent être contournés.</p></li></ul>",
                "remediation": "<p>Désinfectez les entrées de votre API ; s'échapper est insuffisant dans ce cas ; ils ne devraient autoriser que les caractères alphanumériques. Assurez-vous que X-Content-Type-Options sont présents dans chaque réponse API. pour empêcher le navigateur d'interpréter les fichiers comme quelque chose d'autre que ce que le type de contenu a déclaré, utilisez nosniff (cela permet d'empêcher XSS si la page est interprétée comme HTML ou JS). Ajouter Content-Disposition : pièce jointe ; filename=\"filename.extension\" avec l'extension correspondant à l'extension du fichier et au type de contenu, sur les API qui ne seront pas rendues</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Configuration and Deploy Management",
        "details": [
            {
                "references": [
                    "https://cwe.mitre.org/data/definitions/524.html"
                ],
                "locale": "fr",
                "title": "En-tête Anti-Caching (côté serveur)",
                "vulnType": "OWASP WSTG",
                "description": "<p>Les en-têtes anti-caching empêchent le stockage des données sensibles sur les proxys inverses, les équilibreurs de charge et les modules de cache d'application. En n'implémentant pas correctement ces en-têtes, des informations sensibles peuvent être stockées dans le cache de ces modules et peuvent être exposées. Voyons deux exemples d'en-têtes mal configurés : Cache-Control : max-age=315360000, public : la réponse peut être stockée par n'importe quel cache. Cache-Control : private : la réponse peut être stockée par le cache d'un navigateur.</p>",
                "observation": "<p>Confidentialité : Lire les données de l'application : L'attaquant peut être en mesure de lire des informations sensibles</p>",
                "remediation": "<p>Cette vulnérabilité sera réduite si les en-têtes anti-caching sont correctement implémentés. Un en-tête anti-caching utilisé de manière appropriée ressemblera à : Cache-Control : no-store Pragma : no-cache (uniquement pour la compatibilité ascendante avec les clients HTTP/1.0)</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Configuration and Deploy Management",
        "details": [
            {
                "references": [
                    "https://cwe.mitre.org/data/definitions/173.html"
                ],
                "locale": "fr",
                "title": "En-tête Content-Type non sécurisé dans la réponse",
                "vulnType": "OWASP WSTG",
                "description": "<p>La définition des en-têtes de contenu appropriés est cruciale pour renforcer la sécurité de vos applications, car elle réduit votre exposition aux attaques de téléchargement par lecteur et aux sites Web hébergeant du contenu téléchargé par les utilisateurs qui, en raison d'une dénomination intelligente, MS Internet Explorer peut le confondre avec des fichiers HTML exécutables ou dynamiques. , créant des failles de sécurité.</p>",
                "observation": "<ul><li><p>Contrôle d'accès : mécanisme de protection contre le contournement : les contrôles d'accès pour des données ou fonctionnalités utilisateur spécifiques peuvent être contournés.</p></li></ul>",
                "remediation": "<p>Un exemple d'en-tête Content-type sécurisé serait : Content-Type: text/html; charset=UTF8 Type de contenu : application/json ;</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "category": "Configuration and Deploy Management",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/09-Test_File_Permission",
                    "https://cwe.mitre.org/data/definitions/732.html"
                ],
                "locale": "fr",
                "title": "Autorisations excessives de fichiers et de répertoires",
                "vulnType": "OWASP WSTG",
                "description": "<p>Donner à une ressource un paramètre d'autorisation qui permet l'accès à un groupe d'utilisateurs plus important que nécessaire risque d'exposer des données sensibles ou de permettre à des personnes non autorisées de modifier la ressource. Lorsque la ressource est connectée à la configuration, à l’exécution ou aux données utilisateur sensibles du programme, cela est particulièrement risqué. Un exemple clair est un fichier d'exécution qui peut être exécuté par des utilisateurs non autorisés. Un autre exemple est que les informations de compte ou la valeur d'un jeton pour accéder à une API (de plus en plus courante dans les services Web ou microservices actuels) peuvent être stockées dans un fichier de configuration dont les autorisations sont définies par défaut pour être lisibles par tous depuis l'installation. Ces données sensibles peuvent être exposées par des utilisateurs internes malveillants ou par un attaquant distant qui a compromis le service avec d'autres vulnérabilités, mais dispose de faibles privilèges.</p>",
                "observation": "<p>Confidentialité : Lire les données de l'application : Le code injecté pourrait accéder à des données/fichiers restreints. - Confidentialité : lecture de fichiers ou de répertoires : un attaquant pourrait lire des données sensibles, soit en lisant les données directement à partir d'un magasin de données qui n'est pas correctement restreint, soit en accédant à une fonctionnalité privilégiée et insuffisamment protégée pour lire les données.</p>",
                "remediation": "<p>La définition correcte des autorisations de fichiers et de répertoires aidera à résoudre cette vulnérabilité en empêchant les utilisateurs non autorisés d'accéder inutilement à des ressources vitales.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "category": "Configuration and Deploy Management",
        "details": [
            {
                "references": [
                    "https://cwe.mitre.org/data/definitions/770.html"
                ],
                "locale": "fr",
                "title": "Allocation de ressources sans limites ni limitation",
                "vulnType": "OWASP WSTG",
                "description": "<p>En violation de la politique de sécurité prévue pour cet acteur, le logiciel alloue une ressource ou un ensemble de ressources réutilisables au nom de l'acteur sans imposer de limitations sur la taille ou la quantité de ressources pouvant être allouées.</p>",
                "observation": "<ul><li><p>Disponibilité : DoS : Consommation de ressources (Autre) : lors de l'allocation de ressources sans limites, un attaquant pourrait empêcher d'autres systèmes, applications ou processus d'accéder au même type de ressource.</p></li></ul>",
                "remediation": "<p>Exigences - Spécifiez clairement les attentes minimales et maximales en matière de capacités et dictez les comportements acceptables lorsque l'allocation des ressources atteint les limites. Architecture et conception - Limitez la quantité de ressources accessibles aux utilisateurs non privilégiés. Définissez des limites par utilisateur pour les ressources. Autorisez l'administrateur système à définir ces limites. Faites attention à éviter 410. - Concevez des mécanismes de limitation dans l'architecture du système. La meilleure protection consiste à limiter la quantité de ressources qu'un utilisateur non autorisé peut provoquer. Un modèle d’authentification et de contrôle d’accès fort contribuera à prévenir de telles attaques et aidera l’administrateur à identifier l’auteur de l’abus. L'application de connexion doit être protégée autant que possible contre les attaques DoS. Limiter l'accès à la base de données, peut-être en mettant en cache les jeux de résultats, peut aider à minimiser les ressources dépensées. Pour limiter davantage le potentiel d'une attaque DoS, envisagez de suivre le taux de requêtes reçues des utilisateurs et de bloquer les requêtes qui dépassent un seuil de débit défini. - S'assurer que les protocoles comportent des limites d'échelle spécifiques. - Pour tous les contrôles de sécurité effectués côté client, assurez-vous que ces contrôles sont dupliqués côté serveur, afin d'éviter 602 : Application côté client de la sécurité côté serveur. Les attaquants peuvent contourner les vérifications côté client en modifiant les valeurs une fois les vérifications effectuées, ou en modifiant le client pour supprimer entièrement les vérifications côté client. Ensuite, ces valeurs modifiées seraient soumises au serveur. Implémentation - Supposons que toutes les entrées soient malveillantes. Utilisez une stratégie de validation des entrées « accepter le bien connu », c'est-à-dire utiliser une liste d'entrées acceptables qui sont strictement conformes aux spécifications. Rejetez toute entrée qui n’est pas strictement conforme aux spécifications ou transformez-la en quelque chose qui le fait. - Lors de la validation des entrées, tenez compte de toutes les propriétés potentiellement pertinentes, notamment la longueur, le type d'entrée, la gamme complète de valeurs acceptables, les entrées manquantes ou supplémentaires, la syntaxe, la cohérence entre les champs associés et la conformité aux règles métier. À titre d'exemple de logique de règle métier, « bateau » peut être syntaxiquement valide car il ne contient que des caractères alphanumériques, mais il ne l'est pas si l'entrée ne doit contenir que des couleurs telles que « rouge » ou « bleu ». - Ne comptez pas exclusivement sur la recherche d'entrées malveillantes ou mal formées. Cela risque de manquer au moins une entrée indésirable, surtout si l'environnement du code change. Cela peut donner aux attaquants suffisamment de marge pour contourner la validation prévue. Cependant, les listes noires peuvent être utiles pour détecter des attaques potentielles ou déterminer quelles entrées sont si mal formées qu’elles doivent être purement et simplement rejetées.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "category": "Identity Management",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/03-Identity_Management_Testing/04-Testing_for_Account_Enumeration_and_Guessable_User_Account",
                    "https://cwe.mitre.org/data/definitions/203.html",
                    "https://cwe.mitre.org/data/definitions/204.html",
                    "https://cwe.mitre.org/data/definitions/200.html"
                ],
                "locale": "fr",
                "title": "Énumération des comptes (utilisateurs)",
                "vulnType": "OWASP WSTG",
                "description": "<p>En raison d'erreurs de configuration ou de choix de conception intentionnels, les applications Web indiquent souvent clairement si un nom d'utilisateur existe déjà sur le système. Par exemple, lorsque des informations d'identification incorrectes sont envoyées, le message résultant peut parfois indiquer si le nom d'utilisateur existe déjà dans le système ou si le mot de passe a été mal saisi. Un attaquant peut utiliser les informations collectées pour compiler une liste d'utilisateurs pour le système. En utilisant une attaque par force brute ou une attaque par nom d'utilisateur et mot de passe par défaut, par exemple, ces informations peuvent être utilisées pour attaquer l'application Web.</p>",
                "observation": "<ul><li><p>Confidentialité : lecture des données d'application : l'attaquant peut être en mesure de lire des informations sensibles. - Contrôle d'accès : mécanisme de protection de contournement : les contrôles de contrôle d'accès pour des données utilisateur ou des fonctionnalités spécifiques peuvent être contournés.</p></li></ul>",
                "remediation": "<p>Il existe plusieurs recommandations pour éviter ce type de vulnérabilités. La meilleure solution est d'en appliquer tout ou partie selon le cas : - Évitez d'utiliser des données publiques (alias, email, etc.) comme nom d'utilisateur pour vous authentifier dans l'application. Ces données doivent être privées et connues uniquement de l'utilisateur. - Durant la phase de développement, optimiser le processus d'authentification des utilisateurs pour éviter des temps de réponse « élevés » lors de l'authentification. - N'utilisez pas de messages informatifs permettant de deviner l'existence de noms d'utilisateur. - Évitez les comportements différents dans l'application web en fonction de l'existence de noms d'utilisateur. - Déléguer la génération des noms d'utilisateurs à l'application web. Le générateur utilisé doit être complètement aléatoire et jamais séquentiel puisqu'il serait prévisible.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "category": "Identity Management",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/03-Identity_Management_Testing/02-Test_User_Registration_Process",
                    "https://cwe.mitre.org/data/definitions/287.html"
                ],
                "locale": "fr",
                "title": "Processus d’enregistrement des utilisateurs non sécurisé",
                "vulnType": "OWASP WSTG",
                "description": "<p>La fourniture d'un accès au système aux utilisateurs est automatisée (ou partiellement automatisée) par le processus d'enregistrement des utilisateurs de certaines applications Web. En fonction des exigences de sécurité du système, les exigences d'identité pour l'accès peuvent aller d'une identification positive à aucune identification totale. En raison de la taille de leur base d'utilisateurs, de nombreuses applications publiques automatisent complètement les processus d'enregistrement et de provisionnement. Un pirate informatique pourrait utiliser cette vulnérabilité pour contrôler d'autres comptes d'utilisateurs, par exemple si les meilleures pratiques ne sont pas suivies lors de l'automatisation du processus d'enregistrement.</p>",
                "observation": "<p>Contrôle d'accès : exécuter du code ou des commandes non autorisés : cette faiblesse peut conduire à l'exposition de ressources ou de fonctionnalités à des acteurs involontaires, fournissant éventuellement aux attaquants des informations sensibles ou même exécutant du code arbitraire.</p>",
                "remediation": "<p>Il est conseillé de mettre en place des exigences d'identification et de vérification conformes aux exigences de sécurité des données protégées par les informations d'identification.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N",
        "category": "Identity Management",
        "details": [
            {
                "references": [
                    "https://cwe.mitre.org/data/definitions/384.html"
                ],
                "locale": "fr",
                "title": "La fonctionnalité de connexion doit toujours générer un nouvel identifiant de session",
                "vulnType": "OWASP WSTG",
                "description": "<p>Un nouveau cookie de session doit être créé par l'application chaque fois qu'un utilisateur est authentifié avec succès.</p>",
                "observation": "<p>Contrôle d'accès : obtenir des privilèges ou assumer une identité : l'application n'invalide aucun identifiant de session existant et donne à un attaquant la possibilité de voler des sessions authentifiées.</p>",
                "remediation": "<p>Après une connexion réussie, la fonctionnalité de connexion doit toujours créer (et utiliser) un nouvel ID de session. Ceci est fait pour empêcher un attaquant d'attaquer vos utilisateurs en utilisant une attaque de fixation de session. Certains frameworks, tels que les applications .net, ne vous permettent pas de modifier l'ID de session lorsque vous vous connectez. Vous pouvez ajouter un cookie aléatoire supplémentaire avec un jeton fort lors de la connexion chaque fois que ce problème survient et stocker la valeur dans une variable de session. Maintenant que l'authentification ne dépend pas uniquement de l'ID de session et que le cookie aléatoire ne peut pas être prédit ou corrigé par un attaquant, vous pouvez comparer la valeur du cookie avec la variable de session pour empêcher la fixation de session.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "category": "Authentication",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/02-Testing_for_Default_Credentials",
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/07-Testing_for_Weak_Password_Policy",
                    "https://cwe.mitre.org/data/definitions/521.html"
                ],
                "locale": "fr",
                "title": "Faiblesses de la politique de mot de passe",
                "vulnType": "OWASP WSTG",
                "description": "<p>Toutes les fonctionnalités de sécurité intégrées à l’infrastructure technologique peuvent être exposées par une politique de mot de passe laxiste. Sans utiliser d’autres vulnérabilités, deviner un mot de passe donnerait accès à des systèmes légitimes. Cela se produit fréquemment dans les domaines des grandes organisations, où les utilisateurs de l'administrateur disposant de privilèges plus élevés sont complètement oubliés au profit des utilisateurs réguliers avec un accès restreint auxquels est appliquée une politique de mot de passe stricte. En d’autres termes, contrairement à un utilisateur disposant de privilèges limités, un utilisateur administrateur peut utiliser un mot de passe jugé faible. Pour faciliter la connexion des nouveaux utilisateurs, de nombreux services sont initialement livrés avec des noms d'utilisateur et des mots de passe par défaut. L'étape cruciale de modification de ces informations est souvent négligée, laissant le système accessible à l'aide de ce que l'on appelle les informations d'identification par défaut.</p>",
                "observation": "<p>Contrôle d'accès : obtenez des privilèges ou assumez votre identité : à mesure que les mots de passe vieillissent, la probabilité qu'ils soient compromis augmente. - Contrôle d'accès : obtenez des privilèges ou assumez votre identité : un attaquant pourrait facilement deviner les mots de passe des utilisateurs et accéder aux comptes d'utilisateurs.</p>",
                "remediation": "<p>Établissez une politique de mot de passe solide qui oblige l'utilisateur à : - Un mot de passe d'une longueur minimale de 8 caractères ; Utiliser tous les types de caractères, y compris les lettres majuscules et minuscules, les chiffres et les caractères spéciaux. - Utiliser un algorithme de chiffrement efficace comme AES-128 ou SHA-256 - Vérifiez si le mot de passe vide est interdit. - Évitez d'utiliser l'identifiant de l'utilisateur (ou tout sous-ensemble de celui-ci) comme mot de passe. - Forcer régulièrement le changement. - Empêcher les utilisateurs d'utiliser les mots de passe précédents.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N",
        "category": "Authentication",
        "details": [
            {
                "references": [
                    "https://cwe.mitre.org/data/definitions/263.html"
                ],
                "locale": "fr",
                "title": "Aucune politique de rotation des mots de passe",
                "vulnType": "OWASP WSTG",
                "description": "<p>Certaines politiques exigent que les utilisateurs changent leurs mots de passe périodiquement, souvent tous les 90 ou 180 jours. L’avantage de l’expiration du mot de passe est cependant discutable. Les systèmes qui mettent en œuvre de telles politiques empêchent parfois les utilisateurs de choisir un mot de passe trop proche d'une sélection précédente. Cette politique peut souvent se retourner contre nous. Certains utilisateurs ont du mal à concevoir de « bons » mots de passe qui soient également faciles à retenir. Ainsi, si les utilisateurs doivent choisir de nombreux mots de passe parce qu'ils doivent les changer souvent, ils finissent par utiliser des mots de passe beaucoup plus faibles ; la politique encourage également les utilisateurs à noter leurs mots de passe. De plus, si la politique empêche un utilisateur de répéter un mot de passe récent, cela nécessite qu'il existe une base de données des mots de passe récents de chacun (ou de leurs hachages) au lieu d'effacer les anciens de la mémoire. Enfin, les utilisateurs peuvent modifier leur mot de passe à plusieurs reprises en quelques minutes, puis revenir à celui qu'ils souhaitent réellement utiliser, contournant ainsi complètement la politique de changement de mot de passe.</p>",
                "observation": "<p>Contrôle d'accès : obtenez des privilèges ou assumez votre identité : à mesure que les mots de passe vieillissent, la probabilité qu'ils soient compromis augmente.</p>",
                "remediation": "<p>Ce n'est que lorsque la force du mot de passe imposé par l'application n'est plus suffisamment forte pour résister aux attaques par force brute dues à une augmentation de la puissance de calcul que les utilisateurs peuvent être amenés à mettre à jour leurs mots de passe.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:N",
        "category": "Authentication",
        "details": [
            {
                "references": [
                    "https://cwe.mitre.org/data/definitions/620.html"
                ],
                "locale": "fr",
                "title": "Autoriser le changement de mot de passe",
                "vulnType": "OWASP WSTG",
                "description": "<p>Les utilisateurs devraient avoir la possibilité de modifier leur mot de passe chaque fois que nécessaire. Prenons par exemple la situation dans laquelle ils utilisent fréquemment le même mot de passe dans différentes applications. Les utilisateurs doivent immédiatement mettre à jour leurs informations de connexion dans chaque application pour laquelle ils se sont inscrits si leur mot de passe est compromis. Par conséquent, il est possible que le compte d'un utilisateur soit compromis si l'application ne lui donne pas accès à une fonction de mise à jour du mot de passe.</p>",
                "observation": "<p>Contrôle d'accès : mécanisme de protection contre le contournement : les contrôles d'accès pour des données ou fonctionnalités utilisateur spécifiques peuvent être contournés. - Contrôle d'accès : obtenez des privilèges ou assumez votre identité : à mesure que les mots de passe vieillissent, la probabilité qu'ils soient compromis augmente.</p>",
                "remediation": "<p>Les applications doivent offrir une fonctionnalité permettant à l'utilisateur de modifier son propre mot de passe.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Authentication",
        "details": [
            {
                "references": [
                    "https://cwe.mitre.org/data/definitions/521.html"
                ],
                "locale": "fr",
                "title": "Vérifier les mots de passe violés",
                "vulnType": "OWASP WSTG",
                "description": "<p>Au fil des années, des violations ont abouti à la publication de nombreuses bases de données contenant des identifiants volés. Les utilisateurs sont sujets à des attaques par dictionnaire s'ils sélectionnent des mots de passe compromis.</p>",
                "observation": "<ul><li><p>Contrôle d'accès : obtenez des privilèges ou assumez votre identité : un attaquant pourrait facilement deviner les mots de passe des utilisateurs et accéder aux comptes d'utilisateurs.</p></li></ul>",
                "remediation": "<p>Vérifiez que les mots de passe saisis lors de la création du compte, de la connexion et des modifications de mot de passe sont comparés à une liste de mots de passe qui ont été compromis. L'application doit demander à l'utilisateur de ressaisir un mot de passe qui n'a pas déjà été compromis si le mot de passe qu'il a choisi a déjà été compromis.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "category": "Authentication",
        "details": [
            {
                "references": [
                    "https://cwe.mitre.org/data/definitions/330.html"
                ],
                "locale": "fr",
                "title": "Les secrets doivent être sécurisés et générés de manière aléatoire",
                "vulnType": "OWASP WSTG",
                "description": "<p>Les mots de passe, les jetons API et les clés secrètes doivent être générés dynamiquement. Ces jetons peuvent devenir prévisibles et être utilisés par des attaquants pour compromettre les comptes d'utilisateurs lorsqu'ils ne sont pas générés dynamiquement.</p>",
                "observation": "<p>Autre : Autre : lorsqu'un mécanisme de protection s'appuie sur des valeurs aléatoires pour restreindre l'accès à une ressource sensible, telle qu'un identifiant de session ou une graine pour générer une clé cryptographique, alors la ressource protégée peut être accédée en devinant l'identifiant ou la clé - Autre : Autre : si le logiciel s'appuie sur des identifiants uniques et impossibles à deviner pour identifier une ressource, un attaquant pourrait être en mesure de deviner l'identifiant d'une ressource appartenant à un autre utilisateur. L'attaquant pourrait alors lire la ressource ou pré-créer une ressource avec le même ID pour empêcher le programme légitime d'envoyer correctement la ressource à l'utilisateur prévu. Par exemple, un produit peut conserver les informations de session dans un fichier dont le nom est basé sur un nom d'utilisateur. Un attaquant pourrait pré-créer ce fichier pour un utilisateur victime, puis définir les autorisations afin que l'application ne puisse pas générer la session pour la victime, empêchant ainsi la victime d'utiliser l'application. - Contrôle d'accès : obtenir des privilèges ou assumer une identité : lorsqu'un mécanisme d'autorisation ou d'authentification s'appuie sur des valeurs aléatoires pour restreindre l'accès à une fonctionnalité restreinte, telle qu'un identifiant de session ou une graine pour générer une clé cryptographique, un attaquant peut accéder à la fonctionnalité restreinte en deviner l'ID ou la clé.</p>",
                "remediation": "<p>Ces valeurs doivent être générées dynamiquement et valables une seule fois lorsqu'il s'agit de jetons API et de clés secrètes. Le jeton secret doit être cryptographiquement « sécurisé de manière aléatoire », avoir au moins 120 bits d'entropie effective, être salé avec une valeur spéciale de 32 bits générée de manière aléatoire et haché à l'aide d'une fonction de hachage (unidirectionnelle) reconnue. Au lieu de donner à un utilisateur un mot de passe généré dynamiquement, les mots de passe doivent être créés par l'utilisateur lui-même. Afin d'activer son compte et de créer son propre mot de passe, l'utilisateur doit recevoir un lien unique avec un jeton cryptographiquement aléatoire par e-mail ou SMS.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Authentication",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/03-Testing_for_Weak_Lock_Out_Mechanism",
                    "https://cwe.mitre.org/data/definitions/804.html",
                    "https://cwe.mitre.org/data/definitions/645.html",
                    "https://cwe.mitre.org/data/definitions/1216.html",
                    "https://cwe.mitre.org/data/definitions/307.html"
                ],
                "locale": "fr",
                "title": "Faiblesses dans la protection contre les attaques par force brute",
                "vulnType": "OWASP WSTG",
                "description": "<p>Une menace courante à laquelle les développeurs Web sont confrontés est une attaque de devinette de mot de passe connue sous le nom d'attaque par force brute. Une attaque par force brute est une tentative de découvrir un mot de passe en essayant systématiquement toutes les combinaisons possibles de lettres, de chiffres et de symboles jusqu'à ce que vous trouviez la combinaison correcte qui fonctionne. Si votre site Web nécessite une authentification des utilisateurs, vous êtes une bonne cible pour une attaque par force brute. Un attaquant peut toujours découvrir un mot de passe grâce à une attaque par force brute, mais l'inconvénient est que cela peut prendre des années pour le trouver. Selon la longueur et la complexité du mot de passe, il peut y avoir des milliards de combinaisons possibles. Pour accélérer un peu les choses, une attaque par force brute pourrait commencer par des mots du dictionnaire ou des mots du dictionnaire légèrement modifiés, car la plupart des gens les utiliseront plutôt qu'un mot de passe complètement aléatoire. Ces attaques sont appelées attaques par dictionnaire ou attaques hybrides par force brute. Les attaques par force brute mettent les comptes d'utilisateurs en danger et inondent votre site de trafic inutile.</p>",
                "observation": "<p>Contrôle d'accès : contourner le mécanisme de protection : lorsque l'autorisation, l'authentification ou un autre mécanisme de protection s'appuie sur des entités CAPTCHA pour garantir que seuls les acteurs humains peuvent accéder à certaines fonctionnalités, un attaquant automatisé tel qu'un bot peut accéder à la fonctionnalité restreinte en devinant le CAPTCHA. - Disponibilité : DoS : Consommation de ressources (Autre) : Les utilisateurs peuvent être exclus des comptes. - Contrôle d'accès : contourner le mécanisme de protection : un attaquant pourrait effectuer un nombre arbitraire de tentatives d'authentification en utilisant différents mots de passe, et éventuellement accéder au compte ciblé.</p>",
                "remediation": "<p>Créez un système de défense suffisant pour arrêter les attaques. Vérifiez que la combinaison de chiffres et de lettres dans un système captcha est difficile à prédire et ne fournissez la réponse dans aucune des réponses envoyées au navigateur de l'utilisateur. Utiliser les procédures de déverrouillage de compte en fonction du niveau de risque. Du plus risqué au plus sûr : - Blocage et déblocage en fonction du temps. - Déblocage en libre-service (envoi d'e-mail de déblocage à l'adresse e-mail enregistrée). - Déverrouillage administrateur à la main. - Identification positive de l'utilisateur pour le déverrouillage manuel de l'administrateur. - Utiliser un mécanisme de libre-service : Comme mentionné précédemment, ce mécanisme de libre-service doit être suffisamment sécurisé pour empêcher l'attaquant de pouvoir déverrouiller les comptes par lui-même.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Authentication",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/03-Testing_for_Weak_Lock_Out_Mechanism",
                    "https://cwe.mitre.org/data/definitions/693.html"
                ],
                "locale": "fr",
                "title": "Faiblesse du mécanisme d’authentification à deuxième facteur (2FA).",
                "vulnType": "OWASP WSTG",
                "description": "<p>Le mécanisme d’authentification à deux facteurs (2FA) d’un modèle de sécurité Zero Trust est un élément clé. Vous devez confirmer que les utilisateurs qui tentent d'accéder à des données sensibles sont bien ceux qu'ils prétendent être afin de les protéger. Les menaces de sécurité telles que le phishing, les attaques par force brute, l'exploitation des informations d'identification, etc. qui ciblent les mots de passe et les comptes des utilisateurs peuvent être défendues avec succès grâce au 2FA. Disons que vous effectuez une authentification principale dans une application avec un nom d'utilisateur et un mot de passe. Internet est utilisé pour transmettre ces informations (réseau principal). Il serait préférable de terminer l'authentification à deux facteurs en utilisant un canal différent (hors bande). L'authentification hors bande inclut des éléments tels que l'approbation d'une notification push envoyée sur votre réseau mobile. Bien qu’elle soit fortement recommandée, cette approche peut être néfaste si elle n’est pas utilisée correctement.</p>",
                "observation": "<p>Contrôle d'accès : contourner le mécanisme de protection : l'application n'utilise pas ou utilise incorrectement un mécanisme de protection offrant une défense suffisante contre les attaques dirigées contre le produit.</p>",
                "remediation": "<p>Bien qu’il soit préférable d’omettre les SMS comme option 2FA uniquement, cela ne répond pas à la raison de l’ajout de 2FA en premier lieu. Pour éviter la force brute et d’autres attaques ciblant l’authentification par mot de passe, une certaine forme de 2FA est nécessaire. Quelques alternatives au SMS 2FA : - Authentification matérielle. L'authentification matérielle repose sur un périphérique physique dédié pour accorder l'accès. En plus du mot de passe, les utilisateurs doivent saisir un code aléatoire généré par l'appareil. Les connexions échoueront sans le code. Les fournisseurs d'authentification matérielle incluent RSA SecurID et Thales SafeNet. - Authentification logicielle. L'authentification logicielle suit essentiellement le même principe que l'authentification matérielle. Mais au lieu de nécessiter un appareil physique, les codes de jeton sont générés avec une application mobile. L'application d'authentification la plus populaire est Google Authenticator, mais il existe de nombreuses options. Par exemple, RSA propose désormais son authentificateur SecurID sous forme d'application. - Authentification basée sur IP. Cette méthode vérifie l'adresse IP de l'utilisateur lors de la connexion. Vous pouvez bloquer l'accès à des adresses IP spécifiques suspectées d'être malveillantes, ou simplement autoriser uniquement les connexions à partir d'adresses et de plages IP connues. L'authentification basée sur IP peut être utilisée conjointement avec d'autres moyens d'ajouter une autre couche de protection.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "category": "Authentication",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/01-Test_Network_Infrastructure_Configuration",
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/02-Testing_for_Default_Credentials",
                    "https://cwe.mitre.org/data/definitions/521.html"
                ],
                "locale": "fr",
                "title": "Noms d'utilisateur et mots de passe par défaut",
                "vulnType": "OWASP WSTG",
                "description": "<p>Le compte administratif intégré possède des mots de passe par défaut sur de nombreux matériels et applications Web. Bien qu’ils puissent parfois être générés de manière aléatoire, ils sont souvent statiques, ce qui permet à un attaquant de les deviner ou de les obtenir facilement. De plus, des mots de passe prédéfinis peuvent être attribués aux nouveaux utilisateurs lors de leur création dans les applications. Ceux-ci peuvent être générés automatiquement par l’application ou manuellement par le personnel. Les mots de passe dans les deux situations sont susceptibles d’être attaqués par devinette s’ils ne sont pas générés de manière sécurisée.</p>",
                "observation": "<ul><li><p>Contrôle d'accès : obtenez des privilèges ou assumez votre identité : un attaquant pourrait facilement deviner les mots de passe des utilisateurs et accéder aux comptes d'utilisateurs.</p></li></ul>",
                "remediation": "<p>La conception d'un produit doit exiger le respect d'une politique de mot de passe appropriée. Les exigences spécifiques aux mots de passe dépendent fortement de facteurs contextuels, mais il est recommandé qu'elles contiennent les attributs suivants : 1. Application d'une longueur minimale et maximale 2. Restrictions contre la réutilisation des mots de passe. 3. Restrictions contre l'utilisation de mots de passe courants. 4. Restrictions contre l'utilisation de chaînes contextuelles dans le mot de passe (par exemple, ID utilisateur, nom de l'application). Selon le modèle de menace, la politique de mot de passe peut inclure plusieurs attributs supplémentaires. Mots de passe complexes nécessitant des jeux de caractères mixtes (alphabétiques, numériques, spéciaux, majuscules et minuscules) : - L'augmentation de la plage de caractères rend le mot de passe plus difficile à déchiffrer et peut être approprié pour les systèmes qui reposent sur une authentification à un seul facteur. - Malheureusement, un mot de passe complexe peut être difficile à mémoriser, ce qui incite l'utilisateur à sélectionner un mot de passe court ou à mal gérer le mot de passe (le noter). - Un autre inconvénient de cette approche est qu'elle n'entraîne souvent pas une augmentation significative de la complexité globale des mots de passe en raison de l'utilisation prévisible de divers symboles par les utilisateurs. Longueur minimale étendue : 1. L'augmentation du nombre de caractères rend le mot de passe plus difficile à déchiffrer et peut être approprié pour les systèmes qui reposent sur une authentification à un seul facteur. 2. Un inconvénient de cette approche est que la sélection d'une bonne phrase secrète n'est pas facile et que de mauvais mots de passe peuvent toujours être générés. Certaines incitations peuvent être nécessaires pour encourager les mots de passe longs et imprévisibles. Mots de passe générés aléatoirement : 1. La génération d'un mot de passe pour l'utilisateur peut contribuer à garantir que les exigences de longueur et de complexité sont respectées et peut entraîner l'utilisation de mots de passe forts. 2. Un inconvénient de cette approche est que le mot de passe ou la clé résultant peut être trop difficile à mémoriser, ce qui incite à les écrire. Expiration du mot de passe : 1. Exiger un changement périodique du mot de passe peut réduire le délai dont dispose un attaquant pour déchiffrer un mot de passe, tout en limitant les dommages causés par l'exposition du mot de passe ailleurs. 2. L’expiration du mot de passe peut être une bonne technique d’atténuation lorsque des mots de passe longs et complexes ne sont pas souhaités.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "category": "Authentication",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/04-Testing_for_Bypassing_Authentication_Schema",
                    "https://cwe.mitre.org/data/definitions/288.html"
                ],
                "locale": "fr",
                "title": "Contournement de la fonctionnalité de connexion",
                "vulnType": "OWASP WSTG",
                "description": "<p>En sécurité informatique, l'authentification est le processus consistant à tenter de vérifier l'identité numérique de l'expéditeur d'une communication. Un exemple courant de ceci est le processus de connexion. Tester le schéma d'authentification signifie comprendre comment fonctionne le processus d'authentification et utiliser ces informations pour contourner le mécanisme d'authentification. Bien que la plupart des applications nécessitent une authentification pour accéder à des informations privées ou pour exécuter des tâches, toutes les méthodes d'authentification ne sont pas capables d'assurer une sécurité adéquate. La négligence, l'ignorance ou la simple sous-estimation des menaces de sécurité aboutissent souvent à des schémas d'authentification qui peuvent être contournés en contournant simplement la page de connexion et en appelant directement une page interne censée être accessible uniquement une fois l'authentification effectuée. De plus, il est souvent possible de contourner les mesures d’authentification en manipulant les requêtes et en faisant croire à l’application que l’utilisateur est déjà authentifié. Ceci peut être réalisé en modifiant le paramètre d'URL donné, en manipulant le formulaire ou en usurpant des sessions. Des problèmes liés au schéma d'authentification peuvent être rencontrés à différentes étapes du cycle de vie du développement logiciel (SDLC), telles que les phases de conception, de développement et de déploiement : - Lors de la phase de conception, les erreurs peuvent inclure une mauvaise définition des sections de l'application à être protégés, en choisissant de ne pas appliquer de protocoles de chiffrement forts pour sécuriser la transmission des informations d'identification, et bien d'autres encore. - Au cours de la phase de développement, les erreurs peuvent inclure une mise en œuvre incorrecte de la fonctionnalité de validation des entrées ou le non-respect des meilleures pratiques de sécurité pour le langage spécifique. - Lors de la phase de déploiement de l'application, des problèmes peuvent survenir lors de la configuration de l'application (activités d'installation et de configuration) en raison du manque de connaissances techniques requises ou du manque de bonne documentation.</p>",
                "observation": "<p>Contrôle d'accès : contourner le mécanisme de protection : l'attaquant peut utiliser un autre chemin ou canal qui ne nécessite pas d'authentification.</p>",
                "remediation": "<p>Seuls les utilisateurs authentifiés peuvent consulter les pages privées de l'application. Expliquez en détail les modifications requises pour remédier à la vulnérabilité en cas de contournement de la fonctionnalité d'authentification.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Authentication",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/04-Authentication_Testing/06-Testing_for_Browser_Cache_Weaknesses",
                    "https://cwe.mitre.org/data/definitions/525.html"
                ],
                "locale": "fr",
                "title": "Informations sensibles stockées dans le navigateur",
                "vulnType": "OWASP WSTG",
                "description": "<p>L'application Web ne dispose pas d'une politique de mise en cache appropriée qui établit le niveau de mise en cache à effectuer pour chaque page Web et les champs de formulaire associés. Les informations peuvent être stockées par les navigateurs à des fins d'historique et de mise en cache. Pour améliorer les performances, la mise en cache est utilisée afin que les données précédemment téléchargées n'aient pas besoin d'être téléchargées à nouveau. Pour la commodité de l'utilisateur, des mécanismes d'historique sont utilisés afin qu'il puisse voir exactement ce qui a été consulté lors de la récupération de la ressource. Lorsque des données sensibles (comme votre adresse, votre numéro de carte de crédit, votre numéro de sécurité sociale ou votre nom d'utilisateur) sont affichées à l'utilisateur, ces données peuvent être mises en cache ou enregistrées à des fins d'historique et peuvent ainsi être récupérées en consultant le cache du navigateur ou simplement en en appuyant sur le bouton retour du navigateur.</p>",
                "observation": "<p>Confidentialité : Lire les données de l'application : L'attaquant peut être en mesure de lire des informations sensibles</p>",
                "remediation": "<p>Utilisez une stratégie de mise en cache restrictive pour les formulaires et les pages Web contenant potentiellement des informations sensibles. Ne stockez pas d’informations sensibles inutiles dans le cache. Pensez à utiliser le chiffrement dans le cache. Selon que ces informations sont stockées dans l'historique ou mises en cache, les actions suivantes peuvent être prises pour atténuer la vulnérabilité : Il est possible d'empêcher le bouton Précédent d'afficher des données sensibles. Cela peut être fait en : Envoyant la page via HTTPS. Définition de Cache-Control : must-revalidate Pour empêcher la mise en cache des pages contenant des informations sensibles, il est nécessaire d'effectuer l'une des deux opérations suivantes : Définir la directive \"Cache-Control : no-cache, no-store\" ou \"Pragma : no -cache\" dans les en-têtes de réponse de ces pages. Ex : HTTP/1.1 : Cache-Control : pas de cache, pas de magasin. HTTP/1.0 : Pragma : sans cache (ou Cache-Control : sans cache). Expire : <date passée ou valeur illégale (ex : 0)> Incluez dans chaque page HTML contenant des informations sensibles le code suivant : HTTP/1.1 : <META HTTP-EQUIV=\"Cache-Control\" CONTENT=\"no-cache, no-store\"> HTTP/1.0 : <META HTTP-EQUIV=\"Pragma\" CONTENT=\"no-cache\"> <META HTTP-EQUIV=\"Expire\" CONTENT=\"Sam, 01-Jan-2000 00:00:00GMT \"></p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Authentication",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/09-Testing_for_Weak_Password_Change_or_Reset_Functionalities",
                    "https://cwe.mitre.org/data/definitions/640.html"
                ],
                "locale": "fr",
                "title": "Faiblesses dans la fonctionnalité de changement/réinitialisation de mot de passe",
                "vulnType": "OWASP WSTG",
                "description": "<p>Un mécanisme permettant à un utilisateur d'accéder à son compte en cas d'oubli de son mot de passe est généralement présent dans les applications. Le mécanisme de récupération du mot de passe est souvent peu fiable, ce qui augmente la probabilité qu'une personne autre que l'utilisateur légitime du système puisse accéder au compte de cet utilisateur. Un système d'authentification par mot de passe fort est complètement détruit par des procédures de récupération de mot de passe faibles. Cette faiblesse peut être due au fait que la question de sécurité est trop facile à deviner (par exemple, parce que la question est trop courante ou que les réponses peuvent être trouvées via les réseaux sociaux). Il peut également y avoir une faiblesse d'implémentation dans le code du mécanisme de récupération de mot de passe qui peut, par exemple, inciter le système à envoyer le nouveau mot de passe par courrier électronique à un compte de messagerie autre que celui de l'utilisateur. Le taux de réinitialisation du mot de passe peut ne pas être réglementé, de sorte qu'un utilisateur légitime peut se voir refuser le service si un attaquant tente de récupérer son mot de passe en succession rapide. Le système peut envoyer le mot de passe d'origine à l'utilisateur au lieu de générer un nouveau mot de passe temporaire. En résumé, la fonctionnalité de récupération de mot de passe, si elle n'est pas soigneusement conçue et mise en œuvre, peut souvent devenir le maillon le plus faible du système qui peut être utilisé à mauvais escient de manière à permettre à un attaquant d'obtenir un accès non autorisé au système.</p>",
                "observation": "<ul><li><p>Contrôle d'accès : obtenir des privilèges ou assumer une identité : un attaquant pourrait obtenir un accès non autorisé au système en récupérant les informations d'authentification d'un utilisateur légitime. - Disponibilité : DoS : consommation de ressources : un attaquant pourrait refuser le service aux utilisateurs légitimes du système en lançant une attaque par force brute sur le système. mécanisme de récupération de mot de passe utilisant les identifiants d’utilisateurs légitimes. - Autre : Autre : la fonctionnalité de sécurité du système est retournée contre le système par l'attaquant.</p></li></ul>",
                "remediation": "<p>Assurez-vous que le mécanisme de récupération de mot de passe a soigneusement filtré et validé chaque élément d'information fourni par l'utilisateur. - Utilisez plusieurs questions de sécurité plutôt que les questions de sécurité faibles habituelles. - Assurez-vous qu'il n'y a pas trop de réponses incorrectes à une question de sécurité. Après un certain (petit) nombre de mauvaises réponses, désactivez la fonction de récupération de mot de passe. - Exiger que les utilisateurs répondent correctement à la question de sécurité avant de leur permettre de réinitialiser leur mot de passe et de recevoir le nouveau mot de passe à l'adresse e-mail qu'ils ont enregistrée. - Dans le mécanisme de récupération de mot de passe, ne laissez jamais l'utilisateur choisir l'adresse email à laquelle le nouveau mot de passe sera envoyé. - Donnez un nouveau mot de passe temporaire plutôt que de partager l'ancien.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "category": "Authentication",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/09-Testing_for_Weak_Password_Change_or_Reset_Functionalities",
                    "https://cwe.mitre.org/data/definitions/319.html",
                    "https://cwe.mitre.org/data/definitions/311.html"
                ],
                "locale": "fr",
                "title": "Informations d'identification envoyées en texte clair par e-mail",
                "vulnType": "OWASP WSTG",
                "description": "<p>Cette faille implique qu'après que l'utilisateur a vérifié son identité, la fonctionnalité d'enregistrement ou de récupération de mot de passe lui envoie le mot de passe par e-mail. Il y a deux raisons principales pour lesquelles ce système est considéré comme moins sécurisé : L'utilisateur reçoit le mot de passe sous une forme non cryptée. L'utilisateur est verrouillé hors de son compte jusqu'à ce qu'il reçoive l'e-mail car le mot de passe du compte a été modifié au moment de la demande. Il est possible d'empêcher un utilisateur d'accéder à son compte en envoyant de nombreuses requêtes.</p>",
                "observation": "<p>Confidentialité : lecture des données de l'application : un attaquant peut être en mesure de déchiffrer les données à l'aide d'attaques par force brute.</p>",
                "remediation": "<p>Lors de l'envoi de mots de passe par courrier électronique, les domaines suivants doivent être examinés : - L'utilisateur est-il obligé de changer le mot de passe lors de la première connexion ? Le nouveau mot de passe est envoyé par e-mail non crypté et peut rester indéfiniment dans la boîte de réception de l'utilisateur si l'utilisateur ne supprime pas l'e-mail. Par conséquent, l’utilisateur doit être invité à modifier son mot de passe lors de sa première connexion. - Le mot de passe est-il généré de manière sécurisée ? Le mot de passe doit être généré à l’aide d’un générateur de nombres pseudo-aléatoires cryptographiquement sécurisé (CSPRNG) et doit être suffisamment long pour empêcher la devinette du mot de passe ou les attaques par force brute. Pour une expérience utilisateur sécurisée, il doit être généré à l'aide d'une approche de style phrase secrète sécurisée (c'est-à-dire en combinant plusieurs mots), plutôt qu'une chaîne de caractères aléatoire. - Le mot de passe actuel de l'utilisateur est-il envoyé ? Au lieu de générer un nouveau mot de passe pour l'utilisateur, certaines applications envoient aux utilisateurs leur mot de passe actuel. Il s'agit d'une méthode très peu sécurisée, car elle expose votre mot de passe actuel via un courrier électronique non crypté. De plus, si le site est capable de récupérer le mot de passe existant, cela implique que les mots de passe sont stockés à l'aide d'un chiffrement réversible, ou (plus probablement) en texte brut non crypté, ce qui représente une sérieuse faille de sécurité. - Les e-mails sont-ils envoyés depuis un domaine doté d'une protection anti-spoofing ? Le domaine doit implémenter SPF, DKIM et DMARC pour empêcher les attaquants d'usurper les e-mails provenant de celui-ci, qui pourraient être utilisés dans le cadre d'une attaque d'ingénierie sociale. - Le courrier électronique est-il considéré comme suffisamment sécurisé ? Les e-mails sont souvent envoyés non cryptés et, dans de nombreux cas, le compte de messagerie de l'utilisateur ne sera pas protégé par MFA. De plus, il peut être partagé entre plusieurs personnes, notamment dans un environnement d'entreprise. Déterminez si la fonctionnalité de réinitialisation de mot de passe par courrier électronique est appropriée en fonction du contexte de l'application testée.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "category": "Authentication",
        "details": [
            {
                "references": [
                    "https://cwe.mitre.org/data/definitions/287.html"
                ],
                "locale": "fr",
                "title": "Authentification incorrecte",
                "vulnType": "OWASP WSTG",
                "description": "<p>La demande ne prouve pas ou ne prouve pas suffisamment que l'affirmation d'un acteur selon laquelle il possède une identité particulière est vraie.</p>",
                "observation": "<p>Contrôle d'accès : exécuter du code ou des commandes non autorisés : cette faiblesse peut conduire à l'exposition de ressources ou de fonctionnalités à des acteurs involontaires, fournissant éventuellement aux attaquants des informations sensibles ou même exécutant du code arbitraire.</p>",
                "remediation": "<p>Utilisez un framework ou une bibliothèque pour l'authentification, tel que la fonctionnalité d'authentification OWASP ESAPI.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
        "category": "Authentication",
        "details": [
            {
                "references": [
                    "https://cwe.mitre.org/data/definitions/285.html"
                ],
                "locale": "fr",
                "title": "Tous les contrôles d'authentification doivent échouer en toute sécurité",
                "vulnType": "OWASP WSTG",
                "description": "<p>La gestion sécurisée des erreurs est un élément crucial du codage sécurisé. Deux erreurs en particulier nécessitent une attention particulière. La première catégorie concerne les exceptions qui surviennent lors du traitement d’un contrôle de sécurité. Il est crucial que ces exceptions n'autorisent pas des actions que la contre-mesure interdirait généralement. En tant que développeur, vous devez garder à l'esprit qu'un mécanisme de sécurité a généralement trois résultats possibles : - Autoriser la procédure. - Ne permettez pas l'opération. - Une exception En général, votre mécanisme de sécurité doit être construit de manière à ce qu'une panne ait le même effet qu'un arrêt de l'opération.</p>",
                "observation": "<p>Confidentialité : lecture de fichiers ou de répertoires : un attaquant pourrait lire des données sensibles, soit en lisant les données directement à partir d'un magasin de données qui n'est pas correctement restreint, soit en accédant à une fonctionnalité privilégiée et insuffisamment protégée pour lire les données. - Intégrité : modifier des fichiers ou des répertoires : un attaquant pourrait modifier des données sensibles, soit en écrivant les données directement dans un magasin de données qui n'est pas correctement restreint, soit en accédant à une fonctionnalité privilégiée et insuffisamment protégée pour écrire les données. - Contrôle d'accès : obtenir des privilèges ou assumer une identité : un attaquant pourrait obtenir des privilèges en modifiant ou en lisant directement des données critiques, ou en accédant à des fonctionnalités privilégiées et insuffisamment protégées.</p>",
                "remediation": "<p>Avant d'utiliser un système de contrôle d'accès dans votre application, assurez-vous qu'il a tous subi des tests de sécurité approfondis. Des tests unitaires complets sont fréquemment effectués spécifiquement à cet effet.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:N",
        "category": "Authentication",
        "details": [
            {
                "references": [
                    "https://cwe.mitre.org/data/definitions/310.html"
                ],
                "locale": "fr",
                "title": "Les modules cryptographiques doivent échouer en toute sécurité - Padding Oracle Attack",
                "vulnType": "OWASP WSTG",
                "description": "<p>Lorsqu'un module cryptographique tombe en panne de manière non sécurisée, l'appareil doit être mis en état d'erreur afin qu'il ne soit plus fonctionnel.</p>",
                "observation": "<p>Confidentialité : Lire les données de l'application : L'attaquant peut être en mesure de lire des informations sensibles</p>",
                "remediation": "<p>Nous vous conseillons de soumettre le module cryptographique à ses propres tests en utilisant la norme du National Institute of Standards and Technology (NIST) pour voir s'il échoue en toute sécurité.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
        "category": "Authorization",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/01-Testing_Directory_Traversal_File_Include",
                    "https://cwe.mitre.org/data/definitions/22.html"
                ],
                "locale": "fr",
                "title": "Traversée du chemin",
                "vulnType": "OWASP WSTG",
                "description": "<p>La vulnérabilité « Path Traversal » permet aux utilisateurs d'accéder à des fichiers ou des répertoires situés ailleurs sur le système en échappant à la zone restreinte. Il est possible d'accéder à tous les fichiers et répertoires stockés dans le système de fichiers en ajustant les variables qui font référence aux fichiers avec des séquences \"point-point-slash (../)\" et leurs variations.</p>",
                "observation": "<p>Intégrité : exécuter du code ou des commandes non autorisés : l'attaquant peut être en mesure de créer ou d'écraser des fichiers critiques utilisés pour exécuter du code, tels que des programmes ou des bibliothèques. - Confidentialité : exécuter du code ou des commandes non autorisés : l'attaquant peut être en mesure de créer ou d'écraser des fichiers critiques utilisés pour exécuter du code, tels que des programmes ou des bibliothèques. - Disponibilité : exécuter du code ou des commandes non autorisés : l'attaquant peut être en mesure de créer ou d'écraser des fichiers critiques utilisés pour exécuter du code, tels que des programmes ou des bibliothèques. - Intégrité : modifier des fichiers ou des répertoires : l'attaquant peut être en mesure d'écraser ou de créer des fichiers critiques, tels que des programmes, des bibliothèques ou des données importantes. Si le fichier ciblé est utilisé pour un mécanisme de sécurité, l'attaquant pourra alors contourner ce mécanisme. Par exemple, l'ajout d'un nouveau compte à la fin d'un fichier de mots de passe peut permettre à un attaquant de contourner l'authentification. - Confidentialité : lecture de fichiers ou de répertoires : l'attaquant peut lire le contenu de fichiers inattendus et exposer des données sensibles. Si le fichier ciblé est utilisé pour un mécanisme de sécurité, l'attaquant pourra alors contourner ce mécanisme. Par exemple, en lisant un fichier de mots de passe, l’attaquant pourrait mener des attaques de type force brute pour deviner un mot de passe afin de s’introduire dans un compte du système. - Disponibilité : DoS : crash, sortie ou redémarrage : l'attaquant peut être en mesure d'écraser, de supprimer ou de corrompre des fichiers critiques inattendus tels que des programmes, des bibliothèques ou des données importantes. Cela peut empêcher le logiciel de fonctionner et, dans le cas de mécanismes de protection tels que l'authentification, cela peut potentiellement verrouiller tous les utilisateurs du logiciel.</p>",
                "remediation": "<p>Utilisez une stratégie de validation des entrées de données ou une liste d’entrées strictement conformes aux exigences et rejetez toute entrée qui ne répond pas à ces exigences.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
        "category": "Authorization",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/04-Testing_for_Insecure_Direct_Object_References",
                    "https://cwe.mitre.org/data/definitions/706.html",
                    "https://cwe.mitre.org/data/definitions/813.html"
                ],
                "locale": "fr",
                "title": "IDOR (références d'objet directes non sécurisées)",
                "vulnType": "OWASP WSTG",
                "description": "<p>Lorsqu'une application accorde un accès direct aux objets en fonction de la saisie de l'utilisateur, on parle alors de « référence d'objet directe non sécurisée » (IDOR). Cette vulnérabilité permet aux attaquants de contourner l'authentification et d'accéder directement aux ressources système, telles que les fichiers ou les enregistrements de base de données. En modifiant la valeur d'un paramètre utilisé pour pointer directement vers un objet, un attaquant peut contourner l'authentification et obtenir un accès illimité aux ressources. Ces ressources peuvent inclure des fichiers système, des entrées de base de données d'autres utilisateurs, etc. Cela se produit parce que l'application utilise les entrées fournies par l'utilisateur pour récupérer un objet sans effectuer suffisamment de contrôles d'autorisation.</p>",
                "observation": "<p>Contrôle d'accès : contourner le mécanisme de protection : un attaquant pourrait effectuer un nombre arbitraire de tentatives d'authentification en utilisant différents mots de passe, et éventuellement accéder au compte ciblé. - Contrôle d'accès : obtenir des privilèges ou assumer une identité : une élévation horizontale des privilèges est possible (un utilisateur peut afficher/modifier les informations d'un autre utilisateur). - Contrôle d'accès : obtenir des privilèges ou assumer une identité : une élévation verticale des privilèges est possible si la clé contrôlée par l'utilisateur est en fait un indicateur indiquant le statut d'administrateur, permettant à l'attaquant d'obtenir un accès administratif.</p>",
                "remediation": "<p>Évitez d'afficher des références à des éléments secrets tels que des noms de fichiers ou des clés. Le côté serveur doit implémenter correctement la validation des paramètres et la vérification des objets pour toutes les références. Les jetons doivent être créés de manière à limiter leur attribution à l'utilisateur et à empêcher leur partage avec le public.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
        "category": "Authorization",
        "details": [
            {
                "references": [
                    "https://cwe.mitre.org/data/definitions/306.html"
                ],
                "locale": "fr",
                "title": "Principe du moindre privilège",
                "vulnType": "OWASP WSTG",
                "description": "<p>Selon le principe du moindre privilège, les comptes doivent disposer du moins de privilèges nécessaires pour mener à bien leurs opérations commerciales. Cela inclut les droits d'utilisateur ainsi que les autorisations sur le réseau, le système de fichiers et les ressources telles que les limites du processeur et de la mémoire.</p>",
                "observation": "<ul><li><p>Autre : Autre : l'exposition d'une fonctionnalité critique fournit essentiellement à un attaquant le niveau de privilège de cette fonctionnalité. Les conséquences dépendront de la fonctionnalité associée, mais elles peuvent aller de la lecture ou de la modification de données sensibles, à l'accès à des fonctionnalités administratives ou autres fonctionnalités privilégiées, voire éventuellement à l'exécution de code arbitraire.</p></li></ul>",
                "remediation": "<p>Le principe consiste à donner à un compte utilisateur uniquement les privilèges essentiels au travail de cet utilisateur. Par exemple, un utilisateur de sauvegarde n'a pas besoin d'installer de logiciel : par conséquent, l'utilisateur de sauvegarde a uniquement le droit d'exécuter des applications de sauvegarde et liées à la sauvegarde. Tous les autres privilèges, tels que l'installation d'un nouveau logiciel, sont bloqués. - Le principe s'applique également à un utilisateur d'ordinateur personnel qui travaille habituellement avec un compte d'utilisateur normal et ouvre un compte privilégié protégé par mot de passe (c'est-à-dire un superutilisateur) uniquement lorsque la situation l'exige absolument. - Ce principe peut également s'appliquer à vos applications web. Au lieu de dépendre uniquement de méthodes d'authentification basées sur les rôles utilisant des sessions, nous souhaitons plutôt attribuer des privilèges aux utilisateurs au moyen d'un système d'authentification basé sur une base de données. Nous utilisons toujours des sessions afin d'identifier si l'utilisateur a été connecté correctement, mais maintenant, au lieu d'attribuer à cet utilisateur un rôle spécifique, nous lui attribuons des privilèges pour vérifier les actions qu'il a le privilège d'effectuer sur le système. De plus, un grand avantage de cette méthode est que chaque fois qu'un utilisateur doit se voir attribuer moins de privilèges, vos modifications seront appliquées à la volée puisque l'attribution ne dépend pas de la session qui, autrement, devait expirer en premier.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "category": "Authorization",
        "details": [
            {
                "references": [
                    "https://cwe.mitre.org/data/definitions/285.html"
                ],
                "locale": "fr",
                "title": "Autorisation inappropriée",
                "vulnType": "OWASP WSTG",
                "description": "<p>Lorsqu'un acteur tente d'accéder à une ressource ou d'effectuer une action, le logiciel n'effectue pas ou effectue incorrectement un contrôle d'autorisation. En fonction des privilèges de l'utilisateur et des autorisations ou autres exigences de contrôle d'accès qui s'appliquent à la ressource, l'autorisation est le processus permettant de déterminer si un utilisateur doté d'une identité donnée peut accéder à une ressource spécifique. Les utilisateurs peuvent accéder aux données ou effectuer des actions qu'ils ne devraient pas être en mesure d'effectuer lorsque les contrôles de contrôle d'accès ne sont pas appliqués de manière cohérente, voire pas du tout. De nombreux problèmes, tels que l’exposition d’informations, les attaques par déni de service et l’exécution de code arbitraire, peuvent en résulter.</p>",
                "observation": "<p>Confidentialité : lecture de fichiers ou de répertoires : un attaquant pourrait lire des données sensibles, soit en lisant les données directement à partir d'un magasin de données qui n'est pas correctement restreint, soit en accédant à une fonctionnalité privilégiée et insuffisamment protégée pour lire les données. - Intégrité : modifier des fichiers ou des répertoires : un attaquant pourrait modifier des données sensibles, soit en écrivant les données directement dans un magasin de données qui n'est pas correctement restreint, soit en accédant à une fonctionnalité privilégiée et insuffisamment protégée pour écrire les données. - Contrôle d'accès : obtenir des privilèges ou assumer une identité : un attaquant pourrait obtenir des privilèges en modifiant ou en lisant directement des données critiques, ou en accédant à des fonctionnalités privilégiées et insuffisamment protégées.</p>",
                "remediation": "<p>Architecture et conception - Divisez le logiciel en zones anonymes, normales, privilégiées et administratives. Réduisez la surface d’attaque en mappant soigneusement les rôles avec les données et les fonctionnalités. Utilisez le contrôle d'accès basé sur les rôles (RBAC) pour appliquer les rôles aux limites appropriées. Notez que cette approche peut ne pas protéger contre les autorisations horizontales, c'est-à-dire qu'elle ne protégera pas un utilisateur contre les attaques d'autres personnes ayant le même rôle. - Assurez-vous d'effectuer des contrôles d'accès liés à votre logique métier. Ces vérifications peuvent être différentes des vérifications de contrôle d'accès que vous appliquez à des ressources plus génériques telles que des fichiers, des connexions, des processus, de la mémoire et des enregistrements de base de données. Par exemple, une base de données peut restreindre l'accès aux dossiers médicaux à un utilisateur spécifique de la base de données, mais chaque enregistrement peut être destiné uniquement à être accessible au patient et à son médecin. - Utilisez une bibliothèque ou un framework approuvé qui ne permet pas à cette faiblesse de se produire ou fournit des constructions qui permettent d'éviter cette faiblesse plus facilement. - Par exemple, envisagez d'utiliser des cadres d'autorisation tels que le cadre d'autorisation JAAS REF-233 et la fonctionnalité de contrôle d'accès OWASP ESAPI REF-45. - Pour les applications Web, assurez-vous que le mécanisme de contrôle d'accès est correctement appliqué côté serveur sur chaque page. Les utilisateurs ne doivent pas pouvoir accéder à des fonctionnalités ou informations non autorisées en demandant simplement un accès direct à cette page. - Une façon de procéder consiste à garantir que toutes les pages contenant des informations sensibles ne sont pas mises en cache et que toutes ces pages restreignent l'accès aux requêtes accompagnées d'un jeton de session actif et authentifié associé à un utilisateur disposant des autorisations requises pour y accéder. page. Configuration du système : Installation - Utilisez les capacités de contrôle d'accès de votre système d'exploitation et de votre environnement serveur et définissez vos listes de contrôle d'accès en conséquence. Utilisez une stratégie de « refus par défaut » lors de la définition de ces ACL.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "category": "Session Management",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/01-Testing_for_Session_Management_Schema",
                    "https://cwe.mitre.org/data/definitions/1018.html",
                    "https://owasp.org/www-community/attacks/Session_Prediction"
                ],
                "locale": "fr",
                "title": "ID de session prévisible",
                "vulnType": "OWASP WSTG",
                "description": "<p>L'objectif principal de l'attaque par prédiction de session est de prévoir les valeurs d'ID de session qui permettent à un attaquant de contourner le processus d'authentification d'une application. Un attaquant peut prédire une valeur d'ID de session valide et accéder à l'application en enquêtant et en comprenant le processus de génération d'ID de session. Tout d’abord, l’attaquant doit collecter des valeurs d’ID de session valides qui sont utilisées pour identifier les utilisateurs authentifiés. Ensuite, il ou elle doit comprendre la structure de l'ID de session, les informations utilisées pour le créer et l'algorithme de chiffrement ou de hachage utilisé par l'application pour le protéger. Certaines mauvaises implémentations utilisent des ID de session composés du nom d'utilisateur ou d'autres informations prévisibles, telles que l'horodatage ou l'adresse IP du client. Dans le pire des cas, ces informations sont utilisées en texte clair ou sont codées à l’aide d’un algorithme faible tel que le codage base64. En outre, l'attaquant peut mettre en œuvre une technique de force brute pour générer et tester différentes valeurs de l'ID de session jusqu'à ce qu'il accède à l'application.</p>",
                "observation": "<p>Contrôle d'accès : contourner le mécanisme de protection : un attaquant pourrait rester connecté pendant une longue période, ce qui pourrait réutiliser des identifiants et des références directes anciens ou supprimés.</p>",
                "remediation": "<p>En utilisant des hachages et des variables non répétables comme les horodatages, une session non prévisible doit être générée.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Session Management",
        "details": [
            {
                "references": [
                    "https://cwe.mitre.org/data/definitions/614.html https://cwe.mitre.org/data/definitions/1004.html",
                    "https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies",
                    "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"
                ],
                "locale": "fr",
                "title": "Attribut sécurisé manquant dans les cookies",
                "vulnType": "OWASP WSTG",
                "description": "<p>L'attribut Secure et l'attribut HttpOnly sont utilisés pour garantir que les cookies sont envoyés en toute sécurité et que les scripts ou les parties involontaires ne peuvent pas y accéder. Un cookie avec l'attribut Secure n'est envoyé au serveur qu'en conjonction avec une requête HTTPS cryptée. L'API JavaScript ne peut pas accéder à un cookie avec l'attribut HttpOnly ; au lieu de cela, le serveur le reçoit à la place.</p>",
                "observation": "<ul><li><p>Confidentialité : Lire les données de l'application : un attaquant qui réussit un script intersite ou une attaque de type man-in-the-middle pourra lire le contenu du cookie et exfiltrer les informations obtenues.</p></li></ul>",
                "remediation": "<p>Les attributs HttpOnly et Secure doivent être utilisés par le serveur lors de la configuration des cookies afin d'atténuer cette vulnérabilité. Une illustration est fournie ci-dessous : Set-Cookie : cookie1=info1; Sécurisé; Http uniquement</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Session Management",
        "details": [
            {
                "references": [
                    "https://cwe.mitre.org/data/definitions/614.html https://cwe.mitre.org/data/definitions/1004.html",
                    "https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies",
                    "https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html"
                ],
                "locale": "fr",
                "title": "Attribut HTTP uniquement manquant dans les cookies",
                "vulnType": "OWASP WSTG",
                "description": "<p>L'attribut Secure et l'attribut HttpOnly sont utilisés pour garantir que les cookies sont envoyés en toute sécurité et ne sont pas accessibles à des personnes ou à des scripts non autorisés. Seules les requêtes cryptées effectuées via le protocole HTTPS et jamais HTTP non sécurisé sont autorisées à envoyer des cookies avec l'attribut Secure au serveur. L'API JavaScript ne peut pas accéder à un cookie avec l'attribut HttpOnly car il est uniquement envoyé au serveur.</p>",
                "observation": "<p>Confidentialité : lire les données de l'application : si l'indicateur HttpOnly n'est pas défini, les informations sensibles stockées dans le cookie peuvent être exposées à des parties involontaires. - Intégrité : gagner des privilèges ou assumer une identité : si le cookie en question est un cookie d'authentification, le fait de ne pas définir l'indicateur HttpOnly peut permettre à un adversaire de voler des données d'authentification (par exemple, un identifiant de session) et d'usurper l'identité de l'utilisateur.</p>",
                "remediation": "<p>Les attributs HttpOnly et Secure doivent être utilisés par le serveur lors de la configuration des cookies afin d'atténuer cette vulnérabilité. Une illustration est fournie ci-dessous : Set-Cookie : cookie1=info1; Sécurisé; Http uniquement</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Session Management",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes",
                    "https://cwe.mitre.org/data/definitions/1275.html",
                    "https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html",
                    "https://cwe.mitre.org/data/definitions/1275.html"
                ],
                "locale": "fr",
                "title": "Attribut SameSite manquant dans les cookies",
                "vulnType": "OWASP WSTG",
                "description": "<p>Il a été constaté que les cookies créés par l'application n'utilisent pas le mécanisme de protection de SameSite au moment de l'accès au site Web. Cette protection empêche les attaques potentielles de type Cross-Site Request Forgery (CSRF) en régulant la manière dont les cookies sont envoyés dans les requêtes vers d'autres domaines.</p>",
                "observation": "<ul><li><p>Confidentialité : Modifier les données de l'application : Si le site Web n'impose pas de défense supplémentaire contre les attaques CSRF, le fait de ne pas utiliser les valeurs « Lax » ou « Strict » pourrait augmenter le risque d'exposition aux attaques CSRF. La probabilité d'une violation de l'intégrité est faible car une attaque réussie ne dépend pas uniquement d'un attribut SameSite non sécurisé. Afin de réaliser une attaque CSRF, de nombreuses conditions doivent être remplies, telles que l'absence de jetons CSRF, l'absence de confirmation des actions sensibles sur le site Web, un \"simple\" en-tête \"Content-Type\" dans la requête HTTP et bien d'autres encore. .</p></li></ul>",
                "remediation": "<p>Lorsque cela est possible, il est conseillé de créer des cookies avec l'attribut 'SameSite' défini sur la valeur 'Strict'. Set-Cookie : <Cookie>=<Valeur> ; Chemin=/; Expire=<Date> ; Domaine=<Domaine> ; Sécurisé; Http uniquement ; MêmeSite=Strict</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Session Management",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes",
                    "https://cwe.mitre.org/data/definitions/613.html"
                ],
                "locale": "fr",
                "title": "Les cookies d'application ont un délai d'expiration excessif ou indéfini.",
                "vulnType": "OWASP WSTG",
                "description": "<p>L'attribut Expires permet de : - Définir des cookies persistants. - Limiter la durée de vie si une session dure trop longtemps. - Supprimer de force un cookie en le définissant sur une date passée. Contrairement aux cookies de session, les cookies persistants seront utilisés par le navigateur jusqu'à l'expiration du cookie. Une fois la date d'expiration dépassée le délai fixé, le navigateur supprimera le cookie. L’absence d’expiration de session appropriée peut augmenter les chances de réussite de certaines attaques. Par exemple, un attaquant peut intercepter un identifiant de session, éventuellement via une attaque de renifleur de réseau ou de Cross-site Scripting. Même si des délais d'expiration de session courts n'aident pas si un jeton volé est utilisé immédiatement, ils protègent contre la relecture continue de l'ID de session. Dans un autre scénario, un utilisateur peut accéder à un site Web à partir d'un ordinateur partagé (comme dans une bibliothèque, un cybercafé ou un environnement de travail ouvert). Une expiration de session insuffisante pourrait permettre à un attaquant d'utiliser le bouton Précédent du navigateur pour accéder aux pages Web auxquelles la victime a déjà accédé.</p>",
                "observation": "<p>Contrôle d'accès : contourner le mécanisme de protection : un attaquant pourrait rester connecté pendant une longue période, ce qui pourrait réutiliser des identifiants et des références directes anciens ou supprimés.</p>",
                "remediation": "<p>Seuls les cookies persistants sont définis à l'aide de l'attribut lui-même. Il est cependant crucial de vérifier qu'aucune donnée sensible n'est présente dans le cookie persistant. Par exemple, si un cookie persistant est utilisé pour stocker les informations nécessaires à l'authentification de l'utilisateur, un attaquant ayant accès au cookie pourrait l'utiliser pour prouver son identité à l'application. Par conséquent, nous devons nous assurer qu'un cookie contenant des informations sensibles n'a pas l'attribut « Expire ». D’un autre côté, il est conseillé de définir des délais d’expiration brefs pour réduire la probabilité qu’un attaquant potentiel les réutilise.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Session Management",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-community/Session_Timeout"
                ],
                "locale": "fr",
                "title": "Expiration de session insuffisante",
                "vulnType": "OWASP WSTG",
                "description": "<p>Les cookies de session uniques des utilisateurs authentifiés, qui sont généralement utilisés par les applications Web, doivent être configurés avec une durée de vie afin qu'ils expirent après une durée maximale définie. Pour cette raison, si un utilisateur se connecte sur un autre ordinateur sans mettre fin manuellement à sa session, tout autre utilisateur qui se connecte sur cet ordinateur et accède à l'application continuera à être dans la session de l'utilisateur authentifié précédent.</p>",
                "observation": "<p>Contrôle d'accès : contourner le mécanisme de protection : un attaquant pourrait rester connecté pendant une longue période, ce qui pourrait réutiliser des identifiants et des références directes anciens ou supprimés.</p>",
                "remediation": "<p>Réduisez les délais d’expiration des sessions.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "category": "Session Management",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/03-Testing_for_Session_Fixation",
                    "https://cwe.mitre.org/data/definitions/384.html"
                ],
                "locale": "fr",
                "title": "Fixation de session",
                "vulnType": "OWASP WSTG",
                "description": "<p>L'authentification d'un utilisateur ou l'établissement d'une nouvelle session utilisateur, sans invalider les identifiants de session existants, donne à un attaquant la possibilité de voler des sessions authentifiées. Ce scénario est couramment observé lorsque : 1. Une application Web authentifie un utilisateur sans invalider au préalable la session existante, poursuivant ainsi la session déjà associée à l'utilisateur. 2. Un attaquant est capable d'imposer un identifiant de session connu à un utilisateur afin que, une fois l'utilisateur authentifié, l'attaquant ait accès à la session authentifiée. 3. L'application ou le conteneur utilise des identifiants de session prévisibles. Dans l'exploitation générique des vulnérabilités de fixation de session, un attaquant crée une nouvelle session dans une application Web et enregistre l'identifiant de session associé. L'attaquant demande ensuite à la victime de s'associer, et éventuellement de s'authentifier, auprès du serveur à l'aide de cet identifiant de session, donnant ainsi à l'attaquant l'accès au compte de l'utilisateur via la session active.</p>",
                "observation": "<p>Contrôle d'accès : contourner le mécanisme de protection : un attaquant pourrait rester connecté pendant une longue période, ce qui pourrait réutiliser des identifiants et des références directes anciens ou supprimés.</p>",
                "remediation": "<p>La contre-mesure à une vulnérabilité de fixation de session consiste à coder en dur l'application de manière à empêcher l'application d'accepter un jeton qui a été forcé dans la session de la victime. Les étapes suivantes fournissent un moyen robuste de sécuriser une application Web contre ces attaques : - N'acceptez pas les identifiants de session dans les paramètres GET ou POST. Cela rend l'exploitation beaucoup plus difficile pour un attaquant, car il est plus facile de tromper une victime pour qu'elle fasse la demande sans vulnérabilités du navigateur. De plus, tous les ID de session doivent être générés par le serveur ; le client ne devrait pas avoir besoin de proposer un nouvel identifiant de session pour l'application. - Modifiez l'ID de session après la connexion. Le serveur doit générer un nouvel identifiant de session et le définir comme cookie une fois que l'utilisateur s'est connecté. Toute session existante pour l'utilisateur doit être détruite sur le serveur. - Fournir une fonction de déconnexion et faire expirer les anciennes sessions. L'utilisateur doit pouvoir choisir quand mettre fin à sa session avec l'application, ce qui doit mettre immédiatement fin à toute session en cours sur le serveur et ne pas simplement supprimer le cookie du navigateur. Les données de session doivent également expirer automatiquement après une certaine période, afin de réduire le temps pendant lequel un attaquant peut utiliser une session compromise.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
        "category": "Session Management",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery",
                    "https://cwe.mitre.org/data/definitions/352.html"
                ],
                "locale": "fr",
                "title": "Falsification des requêtes intersites/Cross-site Request Forgery (CSRF)",
                "vulnType": "OWASP WSTG",
                "description": "<p>Une attaque Cross-site Request Forgery (CSRF) vise à inciter un utilisateur à exécuter involontairement des fonctionnalités d'une application Web vulnérable, ce qui profitera à l'attaquant et au détriment de l'utilisateur concerné. Plus précisément, l'attaque est réalisée en forçant le navigateur d'un utilisateur sans méfiance à faire une requête au site Web vulnérable, une demande que l'utilisateur exécutera sans s'en rendre compte, et avec succès tant que l'utilisateur est connecté au site Web depuis le Les identifiants déjà établis (ID de session, cookies,...) seront automatiquement utilisés. Contrairement aux attaques XSS, qui exploitent la confiance qu'un utilisateur a dans un site particulier, Cross Site Request Forgery exploite la confiance qu'un site a dans un utilisateur particulier. Il s'agit d'une vulnérabilité d'authentification insuffisante dans laquelle l'application ne valide pas correctement l'origine de la requête.</p>",
                "observation": "<p>Contrôle d'accès : DoS : Crash, Sortie ou Redémarrage : Les conséquences varient en fonction de la nature de la fonctionnalité vulnérable au CSRF. Un attaquant pourrait effectivement effectuer n'importe quelle opération en tant que victime. Si la victime est un administrateur ou un utilisateur privilégié, les conséquences peuvent inclure l'obtention d'un contrôle total sur l'application Web : suppression ou vol de données, désinstallation du produit ou utilisation de celui-ci pour lancer d'autres attaques contre tous les utilisateurs du produit. Étant donné que l'attaquant possède l'identité de la victime, la portée du CSRF n'est limitée que par les privilèges de la victime.</p>",
                "remediation": "<p>Pour éviter les attaques Cross-Site Request Forgery, il est nécessaire que chaque requête adressée au site Web contienne un identifiant unique (un jeton de synchronisation), qui doit être un paramètre que l'attaquant ne peut pas connaître. Par exemple, il est suggéré d'envoyer en paramètre l'identifiant de session de l'utilisateur légitime. Le serveur doit vérifier ce paramètre afin de valider que c'est bien l'utilisateur actuel qui demande l'opération en cours. De plus, l'interaction de l'utilisateur peut être demandée pour les transactions sensibles sous forme de double authentification ou en répondant à un CAPTCHA. De plus, l'en-tête REFERER dans la demande du client doit être vérifié pour garantir que chaque demande provient du site d'origine et non d'une source externe. Cette atténuation, bien que nécessaire, peut être contournée par un attaquant utilisant d'autres types de vulnérabilités telles que XSS.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
        "category": "Session Management",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery",
                    "https://cwe.mitre.org/data/definitions/352.html"
                ],
                "locale": "fr",
                "title": "Absence de token anti-CSRF",
                "vulnType": "OWASP WSTG",
                "description": "<p>Une attaque CSRF vise à inciter un utilisateur à exécuter involontairement des fonctionnalités d'une application Web vulnérable, ce qui profitera à l'attaquant et au détriment de l'utilisateur concerné. Plus précisément, l'attaque est réalisée en forçant le navigateur d'un utilisateur sans méfiance à faire une requête au site Web vulnérable, une demande que l'utilisateur exécutera sans s'en rendre compte, et avec succès tant que l'utilisateur est connecté au site Web depuis le Les identifiants déjà établis (ID de session, cookies,...) seront automatiquement utilisés. Contrairement aux attaques XSS, qui exploitent la confiance qu'un utilisateur a dans un site particulier, Cross Site Request Forgery exploite la confiance qu'un site a dans un utilisateur particulier. Il s'agit d'une vulnérabilité d'authentification insuffisante dans laquelle l'application ne valide pas correctement l'origine de la requête.</p>",
                "observation": "<p>Contrôle d'accès : DoS : Crash, Sortie ou Redémarrage : Les conséquences varient en fonction de la nature de la fonctionnalité vulnérable au CSRF. Un attaquant pourrait effectivement effectuer n'importe quelle opération en tant que victime. Si la victime est un administrateur ou un utilisateur privilégié, les conséquences peuvent inclure l'obtention d'un contrôle total sur l'application Web : suppression ou vol de données, désinstallation du produit ou utilisation de celui-ci pour lancer d'autres attaques contre tous les utilisateurs du produit. Étant donné que l'attaquant possède l'identité de la victime, la portée du CSRF n'est limitée que par les privilèges de la victime.</p>",
                "remediation": "<p>L'application doit être mise à jour pour inclure la prise en charge des jetons anti-CSRF pour tous les formulaires sensibles accessibles lors d'une session authentifiée.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:N",
        "category": "Session Management",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/06-Testing_for_Logout_Functionality",
                    "https://cwe.mitre.org/data/definitions/287.html"
                ],
                "locale": "fr",
                "title": "Faiblesses dans le processus de déconnexion.",
                "vulnType": "OWASP WSTG",
                "description": "<p>Le mécanisme de déconnexion des utilisateurs des applications n’est pas correctement implémenté. Un utilisateur peut à nouveau interagir avec l'application sans avoir à saisir à nouveau ses informations de connexion car la session n'est pas correctement invalidée.</p>",
                "observation": "<p>Contrôle d'accès : exécuter du code ou des commandes non autorisés : cette faiblesse peut conduire à l'exposition de ressources ou de fonctionnalités à des acteurs involontaires, fournissant éventuellement aux attaquants des informations sensibles ou même exécutant du code arbitraire.</p>",
                "remediation": "<p>Il est conseillé que le bouton de déconnexion soit présent sur toutes les pages de l'application, qu'il invalide la session à la fois sur le client et sur le serveur, et que le serveur rejette toute autre connexion établie avec le même token.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:N",
        "category": "Session Management",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/07-Testing_Session_Timeout",
                    "https://cwe.mitre.org/data/definitions/1018.html"
                ],
                "locale": "fr",
                "title": "Faiblesses dans le processus de déconnexion dues à l'inactivité.",
                "vulnType": "OWASP WSTG",
                "description": "<p>Toutes les applications doivent implémenter un délai d'inactivité pour les sessions. Ce délai d'attente définit la durée pendant laquelle une session restera active en cas d'inactivité de l'utilisateur, fermant et invalidant la session après la période d'inactivité définie depuis la dernière requête HTTP reçue par l'application Web pour un ID de session donné. Le délai d'expiration le plus approprié doit être un équilibre entre la sécurité (délai d'expiration plus court) et la convivialité (délai d'expiration plus long) et dépend en grande partie du niveau de sensibilité des données traitées par l'application. Par exemple, un temps de déconnexion de 60 minutes pour un forum public peut être acceptable, mais un délai aussi long serait trop long dans une application de banque à domicile (où un délai d'attente maximum de 15 minutes est recommandé). Dans tous les cas, toute application qui n’impose pas une déconnexion basée sur un délai d’attente doit être considérée comme non sécurisée, à moins qu’un tel comportement ne soit requis par une exigence fonctionnelle spécifique. Le délai d'attente limite les possibilités pour un attaquant de deviner et d'utiliser un identifiant de session valide d'un autre utilisateur et, dans certaines circonstances, peut protéger les ordinateurs publics contre la réutilisation de session. Toutefois, si l'attaquant parvient à détourner une session donnée, le délai d'inactivité ne limite pas ses actions, car il peut générer périodiquement une activité dans la session pour la maintenir active pendant une période plus longue.</p>",
                "observation": "<p>Contrôle d'accès : contourner le mécanisme de protection : un attaquant pourrait rester connecté pendant une longue période, ce qui pourrait réutiliser des identifiants et des références directes anciens ou supprimés.</p>",
                "remediation": "<p>Le côté serveur doit implémenter la gestion des délais d'expiration et de l'expiration des sessions. Un attaquant pourrait manipuler les données contrôlées par le client qui sont utilisées pour imposer le délai d'expiration de la session, telles que les valeurs des cookies ou d'autres paramètres client qui suivent les références temporelles (comme le nombre de minutes depuis l'heure de connexion), afin de prolonger la session. En conséquence, l'application doit surveiller le temps d'inactivité côté serveur et, une fois le délai d'attente écoulé, invalider automatiquement la session de l'utilisateur actuel et supprimer toutes les données côté client.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:N",
        "category": "Session Management",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/09-Testing_for_Session_Hijacking",
                    "https://capec.mitre.org/data/definitions/593.html"
                ],
                "locale": "fr",
                "title": "Détournement de session",
                "vulnType": "OWASP WSTG",
                "description": "<p>L'attaque par détournement de session consiste à exploiter le mécanisme de contrôle de session web, qui est normalement géré pour un token de session. Étant donné que la communication HTTP utilise de nombreuses connexions TCP différentes, le serveur Web a besoin d'une méthode pour reconnaître les connexions de chaque utilisateur. La méthode la plus utile repose sur un jeton que le serveur Web envoie au navigateur client après une authentification réussie du client. Un jeton de session est généralement composé d'une chaîne de largeur variable et peut être utilisé de différentes manières, par exemple dans l'URL, dans l'en-tête de la requête HTTP en tant que cookie, dans d'autres parties de l'en-tête de la requête HTTP ou même dans le corps. de la requête HTTP. L'attaque de détournement de session compromet le jeton de session en volant ou en prédisant un jeton de session valide pour obtenir un accès non autorisé au serveur Web. Le jeton de session peut être compromis de différentes manières ; les plus courants sont : - Prédiction du jeton de session. - Analyse de session. - Attaques côté client (XSS, code JavaScript malveillant, chevaux de Troie, etc.). - Attaque de l'homme du milieu. - Attaque d'homme dans le navigateur.</p>",
                "observation": "<p>Contrôle d'accès : contourner le mécanisme de protection : un attaquant pourrait rester connecté pendant une longue période, ce qui pourrait réutiliser des identifiants et des références directes anciens ou supprimés.</p>",
                "remediation": "<p>Utilisez des processus de génération de clés de session standard du secteur qui génèrent des clés de session en utilisant beaucoup d'entropie, et chiffrez et signez correctement les jetons d'identité en transit. Vous pouvez compter sur de nombreux serveurs Web et d’applications courants pour gérer cette tâche. Pour chaque session, utilisez un délai d'expiration de session. Après ce délai d'expiration, mettez fin à la session de l'utilisateur s'il ne s'est pas explicitement déconnecté. Une nouvelle clé de session doit être générée si l'utilisateur se reconnecte.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:N",
        "category": "Session Management",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-community/attacks/Session_hijacking_attack"
                ],
                "locale": "fr",
                "title": "Connexions simultanées mal contrôlées.",
                "vulnType": "OWASP WSTG",
                "description": "<p>Les applications nécessitant une authentification ne doivent autoriser qu'une seule session active par utilisateur et ne doivent pas autoriser plusieurs sessions utilisateur authentifiées sur différents navigateurs ou ordinateurs.</p>",
                "observation": "<p>Contrôle d'accès : contourner le mécanisme de protection : un attaquant pourrait rester connecté pendant une longue période, ce qui pourrait réutiliser des identifiants et des références directes anciens ou supprimés.</p>",
                "remediation": "<p>Il est conseillé que les sessions d'un même utilisateur ne s'exécutent pas simultanément et qu'ils reçoivent toujours une notification lorsqu'une ancienne session est toujours active.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
        "category": "Input Validation",
        "details": [
            {
                "references": [
                    "https://cwe.mitre.org/data/definitions/159.html"
                ],
                "locale": "fr",
                "title": "(générique) Échec de la désinfection de l'entrée",
                "vulnType": "OWASP WSTG",
                "description": "<p>L'utilisation incorrecte d'éléments spéciaux dans les entrées contrôlées par l'utilisateur n'est pas correctement filtrée, supprimée, citée ou autrement gérée par le produit, ce qui pourrait avoir un impact négatif sur son comportement et son intégrité.</p>",
                "observation": "<p>Disponibilité : DoS : crash, sortie ou redémarrage : les contrôles de validation côté client peuvent être facilement contournés, permettant ainsi à des entrées mal formées ou inattendues de passer dans l'application, potentiellement sous forme de données fiables. Cela peut conduire à des états et des comportements inattendus et éventuellement à un crash. - Disponibilité : exécuter du code ou des commandes non autorisés : un attaquant pourrait utiliser une entrée malveillante pour modifier des données ou éventuellement altérer le flux de contrôle de manière inattendue, y compris l'exécution de commandes arbitraires.</p>",
                "remediation": "<p>Les développeurs doivent s'attendre à ce que des éléments spéciaux soient injectés/supprimés/manipulés dans les vecteurs d'entrée de leur système logiciel. Utilisez une combinaison appropriée de listes noires et de listes blanches pour garantir que seules les entrées valides, attendues et appropriées sont traitées par le système. Implémentation - Supposons que toutes les entrées soient malveillantes. Utilisez une stratégie de validation des entrées « accepter le bien connu », c'est-à-dire utiliser une liste d'entrées acceptables qui sont strictement conformes aux spécifications. Rejetez toute entrée qui n’est pas strictement conforme aux spécifications ou transformez-la en quelque chose qui le fait. Lors de la validation des entrées, tenez compte de toutes les propriétés potentiellement pertinentes, notamment la longueur, le type d'entrée, la gamme complète de valeurs acceptables, les entrées manquantes ou supplémentaires, la syntaxe, la cohérence entre les champs associés et la conformité aux règles métier. À titre d'exemple de logique de règle métier, \"\"bateau\"\" peut être syntaxiquement valide car il ne contient que des caractères alphanumériques, mais il ne l'est pas si l'entrée ne doit contenir que des couleurs telles que \"rouge\" ou \"bleu\". Ne comptez pas exclusivement sur la recherche d’entrées malveillantes ou mal formées. Cela risque de manquer au moins une entrée indésirable, surtout si l'environnement du code change. Cela peut donner aux attaquants suffisamment de marge pour contourner la validation prévue. Cependant, les listes noires peuvent être utiles pour détecter des attaques potentielles ou déterminer quelles entrées sont si mal formées qu’elles doivent être purement et simplement rejetées. - Bien qu'il soit risqué d'utiliser des chaînes de requête, du code ou des commandes générés dynamiquement qui mélangent contrôle et données, cela peut parfois être inévitable. Citez correctement les arguments et échappez tous les caractères spéciaux contenus dans ces arguments. L'approche la plus conservatrice consiste à échapper ou à filtrer tous les caractères qui ne répondent pas à une liste blanche extrêmement stricte (comme tout ce qui n'est pas alphanumérique ou espace blanc). Si certains caractères spéciaux sont encore nécessaires, comme un espace blanc, placez chaque argument entre guillemets après l'étape d'échappement/filtrage. Faites attention à l'injection d'arguments (88). - Les entrées doivent être décodées et canonisées selon la représentation interne actuelle de l'application avant d'être validées (180). Assurez-vous que l'application ne décode pas deux fois la même entrée (174). De telles erreurs pourraient être utilisées pour contourner les schémas de validation de la liste blanche en introduisant des entrées dangereuses après leur vérification.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
        "category": "Input Validation",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting",
                    "https://owasp.org/www-community/attacks/xss/",
                    "https://cwe.mitre.org/data/definitions/79.html"
                ],
                "locale": "fr",
                "title": "(générique) Cross-Site Scripting (XSS)",
                "vulnType": "OWASP WSTG",
                "description": "<p>La vulnérabilité « Cross-Site Scripting (XSS) » permet à des tiers d'injecter du code Java Script ou HTML dans des pages Web d'applications spécifiques. En faisant cela, il est possible de voler des sessions utilisateur, de compromettre la sécurité du système et d'obtenir des informations sensibles ou propriétaires de l'application. Cette vulnérabilité est généralement provoquée par l'incapacité d'une application à valider les paramètres d'entrée et de sortie, ce qui arrive fréquemment avec les formulaires.</p>",
                "observation": "<p>Confidentialité : lecture des données d'application : l'attaque la plus courante effectuée avec des Cross Site Scripting implique la divulgation d'informations stockées dans les cookies des utilisateurs. En règle générale, un utilisateur malveillant créera un script côté client qui, une fois analysé par un navigateur Web, effectuera certaines activités (telles que l'envoi de tous les cookies du site à une adresse e-mail donnée). Ce script sera chargé et exécuté par chaque utilisateur visitant le site Web. Puisque le site demandant l’exécution du script a accès aux cookies en question, le script malveillant le fait également. - Disponibilité : Exécuter du code ou des commandes non autorisés : dans certaines circonstances, il peut être possible d'exécuter du code arbitraire sur l'ordinateur d'une victime lorsque les Cross Site Scripting sont combinés avec d'autres failles. - Contrôle d'accès : lecture des données d'application : la conséquence d'une attaque XSS est la même, qu'elle soit stockée ou réfléchie. La différence réside dans la manière dont la charge utile arrive au serveur. XSS peut provoquer divers problèmes pour l'utilisateur final, dont la gravité va d'une gêne à une compromission complète du compte. Certaines vulnérabilités de cross-site scripting peuvent être exploitées pour manipuler ou voler des cookies, créer des requêtes qui peuvent être confondues avec celles d'un utilisateur valide, compromettre des informations confidentielles ou exécuter du code malveillant sur les systèmes des utilisateurs finaux à diverses fins néfastes. D'autres attaques dommageables incluent la divulgation des fichiers de l'utilisateur final, l'installation de programmes de chevaux de Troie, la redirection de l'utilisateur vers une autre page ou un autre site, l'exécution de contrôles \"Active X\" (sous Microsoft Internet Explorer) à partir de sites qu'un utilisateur perçoit comme dignes de confiance et la modification présentation du contenu.</p>",
                "remediation": "<p>Chaque paramètre géré par l'application doit être validé, notamment lorsqu'il s'agit de données d'entrée fournies par l'utilisateur. Cette validation est toujours effectuée côté serveur et ne repose JAMAIS sur des validations effectuées côté client.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
        "category": "Input Validation",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting",
                    "https://owasp.org/www-community/attacks/xss/",
                    "https://cwe.mitre.org/data/definitions/79.html"
                ],
                "locale": "fr",
                "title": "Cross Site Scripting réfléchis (XSS réfléchi)",
                "vulnType": "OWASP WSTG",
                "description": "<p>Grâce à une attaque Cross-Site Scripting (XSS), un attaquant peut insérer du code malveillant qui s'exécute dans le navigateur de la victime, prendre le contrôle du navigateur et l'utiliser pour accéder aux informations d'identification, aux données sensibles ou aux données de session de l'application affectée. Pour que Reflected Cross-Site Scripting fonctionne, l'attaquant doit être en contact direct avec la victime afin d'envoyer le code malveillant qui sera exécuté dans le navigateur de la victime dans le cadre de l'application.</p>",
                "observation": "<p>Confidentialité : lecture des données d'application : l'attaque la plus courante effectuée avec des Cross Site Scripting implique la divulgation d'informations stockées dans les cookies des utilisateurs. En règle générale, un utilisateur malveillant créera un script côté client qui, une fois analysé par un navigateur Web, effectuera certaines activités (telles que l'envoi de tous les cookies du site à une adresse e-mail donnée). Ce script sera chargé et exécuté par chaque utilisateur visitant le site Web. Puisque le site demandant l’exécution du script a accès aux cookies en question, le script malveillant le fait également. - Disponibilité : Exécuter du code ou des commandes non autorisés : dans certaines circonstances, il peut être possible d'exécuter du code arbitraire sur l'ordinateur d'une victime lorsque les Cross Site Scripting sont combinés avec d'autres failles. - Contrôle d'accès : lecture des données d'application : la conséquence d'une attaque XSS est la même, qu'elle soit stockée ou réfléchie. La différence réside dans la manière dont la charge utile arrive au serveur. XSS peut provoquer divers problèmes pour l'utilisateur final, dont la gravité va d'une gêne à une compromission complète du compte. Certaines vulnérabilités de cross-site scripting peuvent être exploitées pour manipuler ou voler des cookies, créer des requêtes qui peuvent être confondues avec celles d'un utilisateur valide, compromettre des informations confidentielles ou exécuter du code malveillant sur les systèmes des utilisateurs finaux à diverses fins néfastes. D'autres attaques dommageables incluent la divulgation des fichiers de l'utilisateur final, l'installation de programmes de chevaux de Troie, la redirection de l'utilisateur vers une autre page ou un autre site, l'exécution de contrôles \"Active X\" (sous Microsoft Internet Explorer) à partir de sites qu'un utilisateur perçoit comme dignes de confiance et la modification présentation du contenu.</p>",
                "remediation": "<p>La prévention des attaques Cross-site Scripting (XSS) n'est pas triviale selon la complexité de l'application et la manière dont elle gère les données contrôlables par l'utilisateur et le type de vulnérabilité Cross-site Scripting (XSS). Cependant, il existe certains principes généraux que les mesures suivantes doivent mettre en œuvre : - Filtrer la saisie des données : traiter toutes les saisies des utilisateurs comme non fiables, filtrer aussi strictement que possible en fonction de ce qui est attendu ou d'une saisie valide. - Utiliser le chiffrement : en utilisant une technique de chiffrement appropriée, évitez qu'il ne soit interprété comme un contenu légitime. - Utilisez des en-têtes de réponse sécurisés : les navigateurs acceptent différents types d'en-têtes pour empêcher les attaques de type Cross-site Scripting (XSS), telles qu'une politique de sécurité du contenu (CSP) et une « protection X-XSS ». - Protéger les cookies : Il est nécessaire de limiter l'accès éventuel aux cookies de session avec le flag 'HttpOnly'. Cet indicateur désactive l'accès aux cookies via JavaScript côté client.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
        "category": "Input Validation",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-community/attacks/Server_Side_Request_Forgery https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_SS heet.html"
                ],
                "locale": "fr",
                "title": "Cross Site Scripting stockés (XSS stocké)",
                "vulnType": "OWASP WSTG",
                "description": "<p>Les attaques Cross-Site Scripting (XSS) sont un type d'injection dans lequel des scripts malveillants sont injectés dans des sites Web par ailleurs inoffensifs et fiables. Les attaques XSS se produisent lorsqu'un attaquant utilise une application Web pour envoyer du code malveillant, généralement sous la forme d'un script côté navigateur, à un autre utilisateur final. Les failles qui permettent à ces attaques de réussir sont assez répandues et se produisent partout où une application Web utilise l'entrée d'un utilisateur dans la sortie qu'elle génère sans la valider ni l'encoder. Les attaques stockées sont celles où le script injecté est stocké de manière permanente sur les serveurs cibles, comme dans une base de données, dans un forum de messages, un journal de visiteur, un champ de commentaire, etc. La victime récupère ensuite le script malveillant sur le serveur lorsqu'elle demande le script stocké. information. Le XSS stocké est également parfois appelé XSS persistant ou de type I.</p>",
                "observation": "<p>Confidentialité : lecture des données d'application : l'attaque la plus courante effectuée avec des Cross Site Scripting implique la divulgation d'informations stockées dans les cookies des utilisateurs. En règle générale, un utilisateur malveillant créera un script côté client qui, une fois analysé par un navigateur Web, effectuera certaines activités (telles que l'envoi de tous les cookies du site à une adresse e-mail donnée). Ce script sera chargé et exécuté par chaque utilisateur visitant le site Web. Puisque le site demandant l’exécution du script a accès aux cookies en question, le script malveillant le fait également. - Disponibilité : Exécuter du code ou des commandes non autorisés : dans certaines circonstances, il peut être possible d'exécuter du code arbitraire sur l'ordinateur d'une victime lorsque les Cross Site Scripting sont combinés avec d'autres failles. - Contrôle d'accès : lecture des données d'application : la conséquence d'une attaque XSS est la même, qu'elle soit stockée ou réfléchie. La différence réside dans la manière dont la charge utile arrive au serveur. XSS peut provoquer divers problèmes pour l'utilisateur final, dont la gravité va d'une gêne à une compromission complète du compte. Certaines vulnérabilités de cross-site scripting peuvent être exploitées pour manipuler ou voler des cookies, créer des requêtes qui peuvent être confondues avec celles d'un utilisateur valide, compromettre des informations confidentielles ou exécuter du code malveillant sur les systèmes des utilisateurs finaux à diverses fins néfastes. D'autres attaques dommageables incluent la divulgation des fichiers de l'utilisateur final, l'installation de programmes de chevaux de Troie, la redirection de l'utilisateur vers une autre page ou un autre site, l'exécution de contrôles \"Active X\" (sous Microsoft Internet Explorer) à partir de sites qu'un utilisateur perçoit comme dignes de confiance et la modification présentation du contenu.</p>",
                "remediation": "<p>La désinfection de toutes les entrées côté serveur est nécessaire pour réduire le risque de XSS stocké. Pour transmettre toutes les données côté client, créez un filtre boîte blanche avec les caractères autorisés et utilisez le codage HTML.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
        "category": "Input Validation",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/04-Testing_for_HTTP_Parameter_Pollution",
                    "https://cwe.mitre.org/data/definitions/235.html",
                    "https://capec.mitre.org/data/definitions/460.html"
                ],
                "locale": "fr",
                "title": "Pollution des paramètres HTTP (HPP)",
                "vulnType": "OWASP WSTG",
                "description": "<p>La pollution des paramètres HTTP profite du comportement incorrect de l'application lors de la réponse à des requêtes HTTP qui ont le même paramètre défini sur le serveur mais qui ont été envoyées avec des valeurs différentes. La pollution des paramètres HTTP profite du comportement incorrect de l'application lors de la réponse à des requêtes HTTP qui ont le même paramètre défini sur le serveur mais qui ont été envoyées avec des valeurs différentes.</p>",
                "observation": "<ul><li><p>Intégrité : État inattendu : un attaquant pourrait manipuler les paramètres de l'application</p></li></ul>",
                "remediation": "<p>Ce type d'attaque serait évité en nettoyant correctement les données d'entrée, en vérifiant le nombre d'instances de paramètres individuels dans une requête et en recherchant les requêtes avec des affectations en double.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
        "category": "Input Validation",
        "details": [
            {
                "references": [
                    "https://www.owasp.org/index.php/SQL_Injection"
                ],
                "locale": "fr",
                "title": "(générique) Injection SQL",
                "vulnType": "OWASP WSTG",
                "description": "<p>Grâce à l'utilisation de l'injection de code SQL (SQLi), il est possible de modifier la logique des instructions SQL et de permettre l'exécution de différents types de requêtes de base de données. En plus d'ajouter de nouveaux enregistrements ou de supprimer/modifier ceux existants, il est possible d'obtenir de la base de données des données qui ne devraient, en théorie, pas être accessibles, comme des utilisateurs, des mots de passe, des détails sur l'application elle-même, etc. Si l'utilisateur de la base de données a plus de droits que nécessaire, il pourrait lui être possible d'accéder à d'autres bases de données ou même d'exécuter des commandes système. La principale cause de l’injection de code SQL (SQLi) est une mauvaise validation des paramètres d’entrée de l’application.</p>",
                "observation": "<p>Confidentialité : lecture des données d'application : étant donné que les bases de données SQL contiennent généralement des données sensibles, la perte de confidentialité est un problème fréquent lié aux vulnérabilités d'injection SQL. - Contrôle d'accès : contourner le mécanisme de protection : si de mauvaises commandes SQL sont utilisées pour vérifier les noms d'utilisateur et les mots de passe, il peut être possible de se connecter à un système en tant qu'autre utilisateur sans aucune connaissance préalable du mot de passe. - Contrôle d'accès : mécanisme de protection de contournement : si les informations d'autorisation sont conservées dans une base de données SQL, il peut être possible de modifier ces informations grâce à l'exploitation réussie d'une vulnérabilité d'injection SQL. - Intégrité : Modifier les données de l'application : Tout comme il peut être possible de lire des informations sensibles, il est également possible d'apporter des modifications ou même de supprimer ces informations avec une attaque par injection SQL.</p>",
                "remediation": "<p>Validez les paramètres gérés par l'application, notamment lorsque l'utilisateur les soumet en tant que données d'entrée. Cette validation est toujours effectuée côté serveur et ne dépend jamais des validations côté client.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
        "category": "Input Validation",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection",
                    "https://owasp.org/www-community/attacks/Blind_SQL_Injection",
                    "https://cwe.mitre.org/data/definitions/89.html"
                ],
                "locale": "fr",
                "title": "Injection SQL basée sur l'Union en bande",
                "vulnType": "OWASP WSTG",
                "description": "<p>L'attaque par injection SQL (SQLi) tente d'obtenir des informations ou même d'exécuter des commandes via cette vulnérabilité en interagissant de manière inattendue avec la base de données. Puisqu'il s'agit d'une injection SQL aveugle dans ce cas, la réponse ne fournit pas directement d'informations à ce sujet ; au lieu de cela, un attaquant doit déchiffrer les messages de réponse du serveur afin d'obtenir les informations.</p>",
                "observation": "<p>Confidentialité : lecture des données d'application : étant donné que les bases de données SQL contiennent généralement des données sensibles, la perte de confidentialité est un problème fréquent lié aux vulnérabilités d'injection SQL. - Contrôle d'accès : contourner le mécanisme de protection : si de mauvaises commandes SQL sont utilisées pour vérifier les noms d'utilisateur et les mots de passe, il peut être possible de se connecter à un système en tant qu'autre utilisateur sans aucune connaissance préalable du mot de passe. - Contrôle d'accès : mécanisme de protection de contournement : si les informations d'autorisation sont conservées dans une base de données SQL, il peut être possible de modifier ces informations grâce à l'exploitation réussie d'une vulnérabilité d'injection SQL. - Intégrité : Modifier les données de l'application : Tout comme il peut être possible de lire des informations sensibles, il est également possible d'apporter des modifications ou même de supprimer ces informations avec une attaque par injection SQL.</p>",
                "remediation": "<p>Il est conseillé de nettoyer les paramètres d'entrée de l'application pour résoudre ce problème, car cela empêche les attaquants d'introduire des caractères susceptibles de modifier la requête SQL et de permettre la récupération d'informations. La principale suggestion est de mettre en place un système de « liste blanche » où seuls les mots et caractères définis dans la liste sont acceptés et toute autre valeur est ignorée avant d'être utilisée dans la base de données. Si cette option n'est pas réalisable, une \"\"Liste noire\"\" évitant les caractères définis peut être réalisée en utilisant des caractères vulnérables à ce type d'attaque, comme % #'\"\"\"\"'\"\"\"\" () + , et des mots clés de requête SQL tels que \"select\", \"where\", \"union\", \"join\" et \"update\". De plus, vous devez rechercher toutes les variations de codage pour ces caractères, telles que le codage URL, Unicode/UTF-8 et hexadécimal.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
        "category": "Input Validation",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection",
                    "https://cwe.mitre.org/data/definitions/89.html"
                ],
                "locale": "fr",
                "title": "Injection SQL basée sur les erreurs en bande",
                "vulnType": "OWASP WSTG",
                "description": "<p>Une interaction inattendue avec une base de données, connue sous le nom d'attaque par injection SQL (SQLi), tente d'obtenir des informations ou même d'exécuter des commandes à l'aide de cette faille. Puisqu'il s'agit dans ce cas d'une injection SQL basée sur des erreurs, la réponse ne fournit pas directement d'informations à ce sujet ; au lieu de cela, un attaquant doit interpréter les messages d'erreur fournis par le serveur afin d'obtenir les informations.</p>",
                "observation": "<p>Confidentialité : lecture des données d'application : étant donné que les bases de données SQL contiennent généralement des données sensibles, la perte de confidentialité est un problème fréquent lié aux vulnérabilités d'injection SQL. - Contrôle d'accès : contourner le mécanisme de protection : si de mauvaises commandes SQL sont utilisées pour vérifier les noms d'utilisateur et les mots de passe, il peut être possible de se connecter à un système en tant qu'autre utilisateur sans aucune connaissance préalable du mot de passe. - Contrôle d'accès : mécanisme de protection de contournement : si les informations d'autorisation sont conservées dans une base de données SQL, il peut être possible de modifier ces informations grâce à l'exploitation réussie d'une vulnérabilité d'injection SQL. - Intégrité : Modifier les données de l'application : Tout comme il peut être possible de lire des informations sensibles, il est également possible d'apporter des modifications ou même de supprimer ces informations avec une attaque par injection SQL.</p>",
                "remediation": "<p>Il est conseillé de nettoyer les paramètres d'entrée de l'application pour résoudre ce problème, car cela empêche les attaquants d'introduire des caractères susceptibles de modifier la requête SQL et de permettre la récupération d'informations. La principale suggestion est de mettre en place un système de « liste blanche » où seuls les mots et caractères définis dans la liste sont acceptés et toute autre valeur est ignorée avant d'être utilisée dans la base de données. Si cette option n'est pas réalisable, une \"\"Liste noire\"\" évitant les caractères définis peut être réalisée en utilisant des caractères vulnérables à ce type d'attaque, comme % #'\"\"\"\"'\"\"\"\" () + , et des mots clés de requête SQL tels que \"select\", \"where\", \"union\", \"join\" et \"update\". De plus, vous devez rechercher toutes les variations de codage pour ces caractères, telles que le codage URL, Unicode/UTF-8 et hexadécimal.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
        "category": "Input Validation",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection",
                    "https://cwe.mitre.org/data/definitions/89.html"
                ],
                "locale": "fr",
                "title": "Injection SQL aveugle basée sur le temps",
                "vulnType": "OWASP WSTG",
                "description": "<p>L'attaque par injection SQL (SQLi) tente d'obtenir des informations ou même d'exécuter des commandes via cette vulnérabilité en interagissant de manière inattendue avec la base de données. Puisqu'il s'agit dans ce cas d'une injection SQL basée sur le temps, la réponse ne fournit pas directement d'informations à ce sujet ; un attaquant doit plutôt interpréter les temps de réponse du serveur pour obtenir les informations nécessaires.</p>",
                "observation": "<p>Confidentialité : lecture des données d'application : étant donné que les bases de données SQL contiennent généralement des données sensibles, la perte de confidentialité est un problème fréquent lié aux vulnérabilités d'injection SQL. - Contrôle d'accès : contourner le mécanisme de protection : si de mauvaises commandes SQL sont utilisées pour vérifier les noms d'utilisateur et les mots de passe, il peut être possible de se connecter à un système en tant qu'autre utilisateur sans aucune connaissance préalable du mot de passe. - Contrôle d'accès : mécanisme de protection de contournement : si les informations d'autorisation sont conservées dans une base de données SQL, il peut être possible de modifier ces informations grâce à l'exploitation réussie d'une vulnérabilité d'injection SQL. - Intégrité : Modifier les données de l'application : Tout comme il peut être possible de lire des informations sensibles, il est également possible d'apporter des modifications ou même de supprimer ces informations avec une attaque par injection SQL.</p>",
                "remediation": "<p>Il est conseillé de nettoyer les paramètres d'entrée de l'application pour résoudre ce problème, car cela empêche les attaquants d'introduire des caractères susceptibles de modifier la requête SQL et de permettre la récupération d'informations. La principale suggestion est de mettre en place un système de « liste blanche » où seuls les mots et caractères définis dans la liste sont acceptés et toute autre valeur est ignorée avant d'être utilisée dans la base de données. Si cette option n'est pas réalisable, une \"\"Liste noire\"\" évitant les caractères définis peut être réalisée en utilisant des caractères vulnérables à ce type d'attaque, comme % #'\"\"\"\"'\"\"\"\" () + , et des mots clés de requête SQL tels que \"select\", \"where\", \"union\", \"join\" et \"update\". De plus, vous devez rechercher toutes les variations de codage pour ces caractères, telles que le codage URL, Unicode/UTF-8 et hexadécimal.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
        "category": "Input Validation",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection",
                    "https://cwe.mitre.org/data/definitions/89.html"
                ],
                "locale": "fr",
                "title": "Injection SQL aveugle basée sur des booléens",
                "vulnType": "OWASP WSTG",
                "description": "<p>L'attaquant utilise une injection SQL booléenne pour envoyer des requêtes SQL à la base de données, obligeant l'application à renvoyer un résultat différent selon que la requête renvoie vrai ou faux. Le contenu de la réponse HTTP peut changer ou rester le même en fonction du résultat. Même si aucune donnée n'est renvoyée par la base de données, cela permet à un attaquant de déterminer si le résultat est vrai ou faux.</p>",
                "observation": "<p>Confidentialité : lecture des données d'application : étant donné que les bases de données SQL contiennent généralement des données sensibles, la perte de confidentialité est un problème fréquent lié aux vulnérabilités d'injection SQL. - Contrôle d'accès : contourner le mécanisme de protection : si de mauvaises commandes SQL sont utilisées pour vérifier les noms d'utilisateur et les mots de passe, il peut être possible de se connecter à un système en tant qu'autre utilisateur sans aucune connaissance préalable du mot de passe. - Contrôle d'accès : mécanisme de protection de contournement : si les informations d'autorisation sont conservées dans une base de données SQL, il peut être possible de modifier ces informations grâce à l'exploitation réussie d'une vulnérabilité d'injection SQL. - Intégrité : Modifier les données de l'application : Tout comme il peut être possible de lire des informations sensibles, il est également possible d'apporter des modifications ou même de supprimer ces informations avec une attaque par injection SQL.</p>",
                "remediation": "<p>Il est conseillé de nettoyer les paramètres d'entrée de l'application pour résoudre ce problème, car cela empêche les attaquants d'introduire des caractères susceptibles de modifier la requête SQL et de permettre la récupération d'informations. La principale suggestion est de mettre en place un système de « liste blanche » où seuls les mots et caractères définis dans la liste sont acceptés et toute autre valeur est ignorée avant d'être utilisée dans la base de données. Si cette option n'est pas réalisable, une \"\"Liste noire\"\" évitant les caractères définis peut être réalisée en utilisant des caractères vulnérables à ce type d'attaque, comme % #'\"\"\"\"'\"\"\"\" () + , et des mots clés de requête SQL tels que \"select\", \"where\", \"union\", \"join\" et \"update\". De plus, vous devez rechercher toutes les variations de codage pour ces caractères, telles que le codage URL, Unicode/UTF-8 et hexadécimal.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
        "category": "Input Validation",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection",
                    "https://cwe.mitre.org/data/definitions/89.html"
                ],
                "locale": "fr",
                "title": "Injection SQL hors bande",
                "vulnType": "OWASP WSTG",
                "description": "<p>L'injection SQL hors bande exfiltre les données via le canal de sortie, qui peut être le protocole DNS ou HTTP, par opposition à l'injection SQL intra-bande et aveugle. Selon la fonction disponible, un système de base de données peut ou non être en mesure de démarrer une requête HTTP ou DNS sortante. La fonction peut établir une connexion (par exemple, DBMS LDAP.INIT, UTL HTTP.request) ou opérer sur des fichiers (par exemple, load file(), master..xp dirtree). Les serveurs web et de bases de données ciblés doivent respecter les exigences suivantes pour exploiter l'injection SQL OOB : - L'absence de validation des entrées de l'application web - Un environnement réseau qui s'affranchit des périmètres de sécurité et permet au serveur de base de données cible d'initier des requêtes sortantes (via DNS ou HTTP) au grand public - Droits suffisants pour exécuter la fonction requise pour envoyer la demande de sortie</p>",
                "observation": "<p>Confidentialité : lecture des données d'application : étant donné que les bases de données SQL contiennent généralement des données sensibles, la perte de confidentialité est un problème fréquent lié aux vulnérabilités d'injection SQL. - Contrôle d'accès : contourner le mécanisme de protection : si de mauvaises commandes SQL sont utilisées pour vérifier les noms d'utilisateur et les mots de passe, il peut être possible de se connecter à un système en tant qu'autre utilisateur sans aucune connaissance préalable du mot de passe. - Contrôle d'accès : mécanisme de protection de contournement : si les informations d'autorisation sont conservées dans une base de données SQL, il peut être possible de modifier ces informations grâce à l'exploitation réussie d'une vulnérabilité d'injection SQL. - Intégrité : Modifier les données de l'application : Tout comme il peut être possible de lire des informations sensibles, il est également possible d'apporter des modifications ou même de supprimer ces informations avec une attaque par injection SQL.</p>",
                "remediation": "<p>Côté client et côté serveur, validation des entrées. - Traitement correct des erreurs pour éviter l'affichage d'informations détaillées les concernant. - Examiner les architectures du réseau et de la sécurité. - Utilisez le moins de privilèges possible lors de l'attribution du compte de base de données à l'application. - L'utilisation de mesures de sécurité supplémentaires comme les systèmes de prévention des intrusions (IPS) et les pare-feu d'applications Web (WAF). - Garder constamment un œil sur les anomalies et disposer de procédures efficaces de réponse aux incidents sous forme de réseau de contrôles de sécurité.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
        "category": "Input Validation",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/06-Testing_for_LDAP_Injection",
                    "https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html",
                    "https://cwe.mitre.org/data/definitions/90.html"
                ],
                "locale": "fr",
                "title": "Injection LDAP",
                "vulnType": "OWASP WSTG",
                "description": "<p>Les informations sur les utilisateurs, les hôtes et de nombreux autres objets sont stockées à l'aide du protocole LDAP (Lightweight Directory Access Protocol). Une injection LDAP est une attaque côté serveur qui peut révéler, modifier ou insérer des données sensibles sur les utilisateurs et les hôtes représentés dans une structure LDAP. Les paramètres d'entrée qui sont ensuite transmis aux fonctions internes de recherche, d'ajout et de modification sont modifiés pour ce faire. Pour permettre aux utilisateurs de s'authentifier ou de rechercher les informations d'autres utilisateurs au sein d'une structure d'entreprise, une application Web peut utiliser LDAP. Les attaques par injection LDAP visent à insérer des métacaractères de filtre de recherche LDAP dans une requête d'application qui sera exécutée.</p>",
                "observation": "<ul><li><p>Intégrité : modifier les données de l'application : un attaquant pourrait inclure une entrée modifiant la requête LDAP, ce qui permettrait l'exécution de commandes ou de codes involontaires, permettrait la lecture ou la modification de données sensibles ou provoquerait d'autres comportements involontaires.</p></li></ul>",
                "remediation": "<p>Supposons que toutes les entrées sont malveillantes. Utilisez une stratégie de validation des entrées « accepter ce qui est bien connu », c'est-à-dire utiliser une liste d'entrées acceptables qui sont strictement conformes aux spécifications. Rejetez toute entrée qui n'est pas strictement conforme aux spécifications ou transformez-la en quelque chose qui le fait. Lors de la validation des entrées, tenez compte de toutes les propriétés potentiellement pertinentes, telles que la longueur, le type d'entrée, la gamme complète de valeurs acceptables, les entrées manquantes ou supplémentaires, la syntaxe, la cohérence entre les champs associés et le respect des règles métier. À titre d'exemple de logique de règle métier, « ship » peut être syntaxiquement valide car il contient uniquement des caractères alphanumériques, mais il ne l'est pas si l'entrée est censée contenir uniquement des couleurs telles que « rouge » ou « bleu ». Ne comptez pas uniquement sur la recherche d’entrées malveillantes ou mal formées. Au moins une entrée indésirable est susceptible d'être manquée, surtout si l'environnement du code change. Cela peut donner aux attaquants suffisamment de marge pour contourner la validation prévue. Cependant, les listes de refus peuvent être utiles pour détecter des attaques potentielles ou déterminer quelles entrées sont si mal formées qu'elles doivent être purement et simplement rejetées.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
        "category": "Input Validation",
        "details": [
            {
                "references": [
                    "https://cwe.mitre.org/data/definitions/611.html",
                    "https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing https://capec.mitre.org/data/definitions/201.html"
                ],
                "locale": "fr",
                "title": "Traitement des entités externes XML (XXE)",
                "vulnType": "OWASP WSTG",
                "description": "<p>Certaines applications transmettent des données entre le navigateur et le serveur au format XML. Les applications qui effectuent cette opération traitent presque toujours les données XML sur le serveur à l'aide d'une bibliothèque standard ou d'une API de plateforme. Un exemple d'entité XML spéciale est celle dont les valeurs définies sont chargées à partir de sources autres que la DTD dans laquelle elles sont déclarées. Du point de vue de la sécurité, les entités externes sont particulièrement intrigantes car elles permettent de définir une entité en fonction du contenu d'un chemin de fichier ou d'une URL.</p>",
                "observation": "<p>Confidentialité : lecture de fichiers ou de répertoires : si l'attaquant est capable d'inclure une DTD contrefaite et qu'un résolveur d'entité par défaut est activé, l'attaquant peut être en mesure d'accéder à des fichiers arbitraires sur le système. - Intégrité : mécanisme de protection de contournement : la DTD peut inclure des requêtes HTTP arbitraires que le serveur peut exécuter. Cela pourrait conduire à d'autres attaques exploitant la relation de confiance du serveur avec d'autres entités. - Disponibilité : DoS : consommation de ressources (mémoire) : le logiciel peut consommer des cycles de processeur ou de mémoire excessifs en utilisant un URI qui pointe vers un fichier volumineux ou un périphérique qui renvoie toujours des données telles que /dev/random. Alternativement, l'URI pourrait faire référence à un fichier contenant de nombreuses références d'entités imbriquées ou récursives pour ralentir davantage l'analyse.</p>",
                "remediation": "<p>Selon l'aide-mémoire OWASP « XXE Prevention », désactivez le traitement des entités externes XML et des DTD dans tous les analyseurs XML de l'application. De plus, utilisez la validation, le filtrage ou la désinfection des entrées côté serveur qui sont positifs (« liste blanche ») pour écarter les données hostiles dans les documents, en-têtes ou nœuds XML.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
        "category": "Input Validation",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/08-Testing_for_SSI_Injection",
                    "https://owasp.org/www-community/attacks/Server-Side_Includes_(SSI)_Injection#:~:text=The%20Server%2DSide%20Includes%20attack,use%20through%20user%20input%20fields.",
                    "- http://httpd.apache.org/docs/current/howto/ssi.html",
                    "https://cwe.mitre.org/data/definitions/96.html",
                    "https://cwe.mitre.org/data/definitions/116.html",
                    "https://cwe.mitre.org/data/definitions/159.html"
                ],
                "locale": "fr",
                "title": "Injection côté serveur (SSI)",
                "vulnType": "OWASP WSTG",
                "description": "<p>SSI (Server-Side Include) sont des directives présentes dans les applications Web qui servent à alimenter une page HTML avec du contenu dynamique. Ils sont similaires aux CGI, sauf que les SSI sont utilisés pour exécuter certaines actions avant le chargement de la page en cours ou pendant son affichage. Pour ce faire, le serveur Web analyse les SSI avant de proposer la page à l'utilisateur. L'attaque par injection SSI permet d'attaquer une application web en injectant des scripts dans des pages HTML ou en exécutant du code arbitraire à distance. Il peut être exploité via la manipulation des directives SSI utilisées dans l'application ou forcer leur utilisation en injectant de nouvelles directives via les champs de saisie utilisateur. Il est possible de vérifier si l'application valide correctement les données dans les champs de saisie en insérant des caractères utilisés dans les directives SSI, tels que : &lt; ! # = / . \" -&gt; et [a-zA-Z0-9] Une autre façon de savoir si l'application est potentiellement vulnérable est de vérifier la présence de pages avec les extensions .stm, .shtm et .shtml. Cependant, l'absence de telles pages ne signifie pas que l'application est protégée contre les attaques SSI. Dans les deux cas, l'attaque ne réussira que si le serveur Web autorise l'exécution de SSI sans effectuer au préalable une validation appropriée. Si cela se produit, il peut être possible d'accéder aux fichiers système et de les manipuler. et processus avec l'autorisation du propriétaire du processus du serveur Web.</p>",
                "observation": "<p>Confidentialité : Lire les données de l'application : Le code injecté pourrait accéder à des données/fichiers restreints. - Contrôle d'accès : mécanisme de protection contre le contournement : dans certains cas, le code injectable contrôle l'authentification ; cela peut conduire à une vulnérabilité à distance. - Contrôle d'accès : obtenir des privilèges ou assumer une identité : le code injecté peut accéder à des ressources auxquelles l'attaquant n'a pas directement accès. - Autre : Exécuter du code ou des commandes non autorisés : les attaques par injection de code peuvent entraîner une perte de l'intégrité des données dans presque tous les cas, car les données du plan de contrôle injectées sont toujours accessoires au rappel ou à l'écriture des données. De plus, l’injection de code peut souvent entraîner l’exécution de code arbitraire. - Non-répudiation : Masquer les activités : Souvent, les actions effectuées par le code de contrôle injecté ne sont pas enregistrées. - Intégrité : Modifier les données de l'application : Les communications entre les composants peuvent être modifiées de manière inattendue. Des commandes inattendues peuvent être exécutées, contournant d'autres mécanismes de sécurité. Les données entrantes peuvent être mal interprétées.</p>",
                "remediation": "<p>Les données contrôlables par l'utilisateur ne doivent pas, dans la mesure du possible, être intégrées par les applications dans des pages rendues pour les directives SSI. Il existe généralement d’autres moyens plus sûrs d’implémenter les fonctionnalités nécessaires. Si cela s’avère peu pratique, les données doivent être rigoureusement validées. Idéalement, vous devriez utiliser une liste blanche de valeurs particulièrement acceptables. Seules les chaînes alphanumériques brèves seront acceptées à défaut. Toute donnée supplémentaire, y compris tout métacaractère SSI potentiel, doit être exclue de la saisie.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
        "category": "Input Validation",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/09-Testing_for_XPath_Injection",
                    "https://owasp.org/www-community/attacks/XPATH_Injection",
                    "https://cwe.mitre.org/data/definitions/94.html"
                ],
                "locale": "fr",
                "title": "Injection XPATH",
                "vulnType": "OWASP WSTG",
                "description": "<p>Semblables à l'injection SQL, les attaques par injection XPath ont lieu lorsqu'un site Web crée une requête XPath pour des données XML à l'aide des données fournies par l'utilisateur. XPath est une sorte d'instruction descriptive simple qui permet de rechercher dans le XML une information spécifique. Vous pouvez spécifier des attributs spécifiques à rechercher et des modèles à faire correspondre, tout comme dans SQL. Il est courant d'accepter une sorte d'entrée dans la chaîne de requête lors de l'utilisation de XML pour un site Web afin d'identifier le contenu à rechercher et à afficher sur la page. Ces requêtes peuvent être modifiées pour renvoyer plus de données qu'elles ne le devraient ou même exécuter du code côté serveur si l'attaquant envoie une chaîne XPath malveillante.</p>",
                "observation": "<p>Contrôle d'accès : mécanisme de protection contre le contournement : dans certains cas, le code injectable contrôle l'authentification ; cela peut conduire à une vulnérabilité à distance. - Contrôle d'accès : obtenir des privilèges ou assumer une identité : le code injecté peut accéder à des ressources auxquelles l'attaquant n'a pas directement accès. - Autre : Exécuter du code ou des commandes non autorisés : les attaques par injection de code peuvent entraîner une perte de l'intégrité des données dans presque tous les cas, car les données du plan de contrôle injectées sont toujours accessoires au rappel ou à l'écriture des données. De plus, l’injection de code peut souvent entraîner l’exécution de code arbitraire. - Non-répudiation : Masquer les activités : Souvent, les actions effectuées par le code de contrôle injecté ne sont pas enregistrées.</p>",
                "remediation": "<p>Avant d'être incluses dans les requêtes XPATH (XML), les entrées utilisateur doivent être strictement validées. Il est conseillé d'utiliser une liste blanche qui restreint les caractères ou les valeurs que l'application acceptera comme entrée utilisateur. Si la liste blanche n'est pas une option, une alternative moins préférée consiste à utiliser une liste noire qui élimine au moins les caractères \"\"'/ @ = * [] (y)</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
        "category": "Input Validation",
        "details": [
            {
                "references": [
                    "https://cwe.mitre.org/data/definitions/35.html",
                    "https://capec.mitre.org/data/definitions/126.html"
                ],
                "locale": "fr",
                "title": "Manipulation du chemin de fichier",
                "vulnType": "OWASP WSTG",
                "description": "<p>Lorsque des données contrôlables par l'utilisateur sont insérées dans un chemin de fichier ou d'URL utilisé sur le serveur pour accéder à des ressources locales, qui peuvent être situées à l'intérieur ou à l'extérieur de la racine Web, des vulnérabilités de manipulation de chemin de fichier sont créées. Si un chemin de fichier est vulnérable, un attaquant peut le modifier pour accéder à différentes ressources.</p>",
                "observation": "<ul><li><p>Confidentialité : lecture de fichiers ou de répertoires : un attaquant pourrait lire des données confidentielles s'il est capable de contrôler les références aux ressources. - Intégrité : modifier des fichiers ou des répertoires : un attaquant pourrait modifier des données sensibles, soit en écrivant les données directement dans un magasin de données qui n'est pas correctement restreint, soit en accédant à une fonctionnalité privilégiée et insuffisamment protégée pour écrire les données.</p></li></ul>",
                "remediation": "<p>Croire que toutes les entrées sont malveillantes. Utiliser une liste d'entrées strictement conformes aux spécifications dans le cadre d'une stratégie de validation des entrées « accepter le bien connu ». Toute contribution qui ne respecte pas strictement les spécifications doit être rejetée ou modifiée. Utilisez des listes blanches strictes qui limitent le jeu de caractères pouvant être utilisé lors de la validation des noms de fichiers. Pour éviter les vulnérabilités telles que CWE-23, n'autorisez qu'un seul \".\" caractère dans le nom de fichier et conservez les séparateurs de répertoire comme \"/\".</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
        "category": "Input Validation",
        "details": [
            {
                "references": [
                    "https://cwe.mitre.org/data/definitions/73.html"
                ],
                "locale": "fr",
                "title": "Contrôle externe du nom de fichier",
                "vulnType": "OWASP WSTG",
                "description": "<p>En raison d'une vulnérabilité, les noms de fichiers utilisés par le système de fichiers peuvent être modifiés ou contrôlés par l'utilisateur. Un attaquant peut créer un package modifiant l'extension téléchargeable du fichier ZIP.</p>",
                "observation": "<p>Confidentialité : Modifier des fichiers ou des répertoires : L'application peut fonctionner sur des fichiers inattendus. La confidentialité est violée lorsque le nom du fichier ciblé n'est pas directement lisible par l'attaquant. - Intégrité : Modifier des fichiers ou des répertoires : L'application peut fonctionner sur des fichiers inattendus. Cela peut violer l'intégrité si le nom de fichier est écrit ou si le nom de fichier est destiné à un programme ou à une autre forme de code exécutable. - Disponibilité : DoS : crash, sortie ou redémarrage ; DoS : Consommation de ressources (Autre) : L'application peut fonctionner sur des fichiers inattendus. La disponibilité peut être violée si l'attaquant spécifie un fichier inattendu que l'application modifie. La disponibilité peut également être affectée si l'attaquant spécifie un nom de fichier pour un fichier volumineux, ou pointe vers un périphérique spécial ou un fichier qui n'a pas le format attendu par l'application.</p>",
                "remediation": "<p>Croire que toutes les entrées sont malveillantes. Utiliser une liste d'entrées strictement conformes aux spécifications dans le cadre d'une stratégie de validation des entrées « accepter le bien connu ». Toute contribution qui ne respecte pas strictement les spécifications doit être rejetée ou modifiée. Utilisez des listes blanches strictes qui limitent le jeu de caractères pouvant être utilisé lors de la validation des noms de fichiers. Pour éviter les vulnérabilités telles que CWE-23, n'autorisez qu'un seul \".\" caractère dans le nom de fichier et conservez les séparateurs de répertoire tels que \"/\". Croire que toutes les entrées sont malveillantes Utilisez une liste d'entrées strictement conformes aux spécifications dans le cadre d'une stratégie de validation des entrées \"accepter le bien connu\". Toute contribution qui ne respecte pas strictement les spécifications doit être rejetée ou modifiée. Utilisez des listes blanches strictes qui limitent le jeu de caractères pouvant être utilisé lors de la validation des noms de fichiers.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
        "category": "Input Validation",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_File_Inclusion",
                    "https://cwe.mitre.org/data/definitions/20.html",
                    "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11-Testing_for_Code_Injection"
                ],
                "locale": "fr",
                "title": "Exécution de code à distance (RCE) par injection de fichiers locaux",
                "vulnType": "OWASP WSTG",
                "description": "<p>Utilisant les procédures d'appel de fichiers vulnérables de l'application, l'inclusion de fichiers locaux (LFI) est le processus d'inclusion de fichiers déjà présents sur le serveur. Par exemple, lorsqu'une page reçoit une entrée correspondant au chemin d'accès à un fichier local, cette vulnérabilité se manifeste. Les caractères traversant le répertoire peuvent être injectés pour accéder à d'autres fichiers sur le serveur si cette entrée n'est pas correctement nettoyée.</p>",
                "observation": "<p>Contrôle d'accès : exécuter du code ou des commandes non autorisés : cette faiblesse peut conduire à l'exposition de ressources ou de fonctionnalités à des acteurs involontaires, fournissant éventuellement aux attaquants des informations sensibles ou même exécutant du code arbitraire.</p>",
                "remediation": "<p>La meilleure façon de se débarrasser des vulnérabilités d’inclusion de fichiers est de ne jamais donner d’entrée utilisateur à aucun système de fichiers/API de framework. Si cela n'est pas possible, l'application peut conserver une liste des fichiers autorisés que la page peut inclure, puis utiliser un numéro d'index ou un autre identifiant pour accéder au fichier souhaité. Afin que les utilisateurs malveillants ne puissent pas manipuler la route, toute requête contenant un identifiant invalide doit être rejetée. Il est conseillé de respecter les recommandations du guide OWASP (https://cheatsheetseries.owasp.org/cheatsheets/File Upload Cheat Sheet.html) pour les bonnes pratiques de remédiation contre les vulnérabilités d'inclusion de fichiers.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
        "category": "Input Validation",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_File_Inclusion",
                    "https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html",
                    "https://cwe.mitre.org/data/definitions/20.html"
                ],
                "locale": "fr",
                "title": "Exécution de code à distance (RCE)",
                "vulnType": "OWASP WSTG",
                "description": "<p>Les attaques connues sous le nom d'exécution de code à distance (RCE) donnent à un attaquant la possibilité d'exécuter à distance du code malveillant sur un ordinateur. Une vulnérabilité RCE peut entraîner l'exécution de logiciels malveillants ou la prise de contrôle complète d'une machine compromise par un attaquant.</p>",
                "observation": "<p>Contrôle d'accès : exécuter du code ou des commandes non autorisés : cette faiblesse peut conduire à l'exposition de ressources ou de fonctionnalités à des acteurs involontaires, fournissant éventuellement aux attaquants des informations sensibles ou même exécutant du code arbitraire.</p>",
                "remediation": "<p>Restreindre la source, qu'il s'agisse d'une entrée ou d'un chemin ouvert menant à une application, à partir de laquelle le RCE est accessible.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
        "category": "Input Validation",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.1-Testing_for_File_Inclusion",
                    "https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html",
                    "https://cwe.mitre.org/data/definitions/20.html"
                ],
                "locale": "fr",
                "title": "Exécution de code à distance (RCE) par injection de fichiers à distance",
                "vulnType": "OWASP WSTG",
                "description": "<p>Le processus d'inclusion de références à des fichiers distants à partir d'un autre serveur via l'utilisation de procédures d'appel de fichiers faibles implémentées dans l'application est connu sous le nom d'inclusion de fichiers distants (RFI). Cette faille, par exemple, apparaît lorsqu'une page télécharge des fichiers provenant de sources extérieures et les inclut ensuite dans l'application. Il est possible de modifier la ressource pour effectuer la requête sur une ressource contrôlée par un attaquant si cette entrée n'est pas correctement nettoyée.</p>",
                "observation": "<p>Contrôle d'accès : exécuter du code ou des commandes non autorisés : cette faiblesse peut conduire à l'exposition de ressources ou de fonctionnalités à des acteurs involontaires, fournissant éventuellement aux attaquants des informations sensibles ou même exécutant du code arbitraire.</p>",
                "remediation": "<p>La meilleure façon de se débarrasser des vulnérabilités d’inclusion de fichiers est de ne jamais donner d’entrée utilisateur à aucun système de fichiers/API de framework. Si cela n'est pas possible, l'application peut conserver une liste des fichiers autorisés que la page peut inclure, puis utiliser un numéro d'index ou un autre identifiant pour accéder au fichier souhaité. Afin que les utilisateurs malveillants ne puissent pas manipuler la route, toute requête contenant un identifiant invalide doit être rejetée. Il est conseillé de respecter les recommandations du guide OWASP (https://cheatsheetseries.owasp.org/cheatsheets/File Upload Cheat Sheet.html) pour les bonnes pratiques de remédiation contre les vulnérabilités d'inclusion de fichiers.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "category": "Authorization",
        "details": [
            {
                "references": [
                    "https://cwe.mitre.org/data/definitions/284.html"
                ],
                "locale": "fr",
                "title": "Contrôle d'accès inapproprié",
                "vulnType": "OWASP WSTG",
                "description": "<p>Le logiciel ne restreint pas ou restreint de manière incorrecte l'accès à une ressource à un acteur non autorisé. Le contrôle d'accès implique l'utilisation de plusieurs mécanismes de protection tels que : - L'authentification (prouvant l'identité d'un acteur) - L'autorisation (garantissant qu'un acteur donné peut accéder à une ressource) - La responsabilité (suivi des activités qui ont été réalisées) Lorsqu'un mécanisme n'est pas appliqué ou échoue, les attaquants peuvent compromettre la sécurité du logiciel en obtenant des privilèges, en lisant des informations sensibles, en exécutant des commandes, en évitant la détection, etc. Il existe deux comportements distincts qui peuvent introduire des faiblesses du contrôle d'accès : - Spécification : privilèges, autorisations, propriété incorrects , etc. sont explicitement spécifiés pour l'utilisateur ou la ressource (par exemple, définir un fichier de mot de passe pour qu'il soit accessible en écriture par tout le monde ou donner des capacités d'administrateur à un utilisateur invité). Cette action peut être effectuée par le programme ou l'administrateur. - Application : le mécanisme contient des erreurs qui l'empêchent d'appliquer correctement les exigences de contrôle d'accès spécifiées (par exemple, permettre à l'utilisateur de spécifier ses propres privilèges, ou permettre à une ACL syntaxiquement incorrecte de produire des paramètres non sécurisés). Ce problème se produit au sein du programme lui-même, dans la mesure où il n'applique pas réellement la politique de sécurité prévue par l'administrateur.</p>",
                "observation": "<ul><li><p>Contrôle d'accès : mécanisme de protection contre le contournement : les contrôles d'accès pour des données ou fonctionnalités utilisateur spécifiques peuvent être contournés.</p></li></ul>",
                "remediation": "<p>Architecture et conception - Gérer très soigneusement la définition, la gestion et la gestion des privilèges. Gérez explicitement les zones de confiance dans le logiciel. - Compartimenter le système pour disposer de zones « sûres » où les limites de confiance peuvent être tracées sans ambiguïté. Ne laissez pas les données sensibles sortir de la limite de confiance et soyez toujours prudent lorsque vous interagissez avec un compartiment en dehors de la zone de sécurité. - Veiller à ce qu'un compartimentage approprié soit intégré à la conception du système et à ce que le compartimentage serve à permettre et à renforcer davantage la fonctionnalité de séparation des privilèges. Les architectes et les concepteurs doivent s'appuyer sur le principe du moindre privilège pour décider quand il est approprié d'utiliser et d'abandonner les privilèges du système.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
        "category": "Authorization",
        "details": [
            {
                "references": [
                    "https://cwe.mitre.org/data/definitions/284.html"
                ],
                "locale": "fr",
                "title": "Exécution de code à distance (RCE) par un contrôle d'accès inapproprié",
                "vulnType": "OWASP WSTG",
                "description": "<p>L'incapacité du logiciel à imposer des contrôles d'accès sur un objet du site Web est appelée vulnérabilité de contrôle d'accès inapproprié. Lors de l'accès au service Web, un utilisateur malveillant peut compromettre la sécurité du logiciel et entreprendre certaines actions non approuvées.</p>",
                "observation": "<ul><li><p>Autre : varie selon le contexte : un attaquant peut accéder à toute fonctionnalité accessible par inadvertance à la source.</p></li></ul>",
                "remediation": "<p>Ne permettez pas aux utilisateurs anonymes d’accéder à ce site Web.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
        "category": "Input Validation",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/12-Testing_for_Command_Injection",
                    "https://portswigger.net/web-security/os-command-injection",
                    "https://cwe.mitre.org/data/definitions/77.html",
                    "https://cwe.mitre.org/data/definitions/78.html"
                ],
                "locale": "fr",
                "title": "Injection de commandes",
                "vulnType": "OWASP WSTG",
                "description": "<p>Les vulnérabilités d'injection de commandes se produisent généralement lorsque : 1. Des données pénètrent dans l'application à partir d'une source non fiable. 2. Les données font partie d'une chaîne exécutée sous forme de commande par l'application. 3. En exécutant la commande, l'application donne à un attaquant un privilège ou une capacité qu'il n'aurait pas autrement. De nombreux protocoles et produits disposent de leur propre langage de commande personnalisé. Bien que les chaînes de commande du shell ou du système d'exploitation soient fréquemment découvertes et ciblées, les développeurs ne se rendent peut-être pas compte que ces autres langages de commande peuvent également être vulnérables aux attaques.</p>",
                "observation": "<p>Intégrité : Exécuter du code ou des commandes non autorisées : Si un utilisateur malveillant injecte un caractère (comme un point-virgule) qui délimite la fin d'une commande et le début d'une autre, il peut être alors possible d'insérer une commande entièrement nouvelle et sans rapport. cela n’était pas destiné à être exécuté. - Confidentialité : Lire les données de l'application : Le code injecté pourrait accéder à des données/fichiers restreints. - Contrôle d'accès : mécanisme de protection contre le contournement : dans certains cas, le code injectable contrôle l'authentification ; cela peut conduire à une vulnérabilité à distance. - Contrôle d'accès : obtenir des privilèges ou assumer une identité : le code injecté peut accéder à des ressources auxquelles l'attaquant n'a pas directement accès. - Autre : Exécuter du code ou des commandes non autorisés : les attaques par injection de code peuvent entraîner une perte de l'intégrité des données dans presque tous les cas, car les données du plan de contrôle injectées sont toujours accessoires au rappel ou à l'écriture des données. De plus, l’injection de code peut souvent entraîner l’exécution de code arbitraire. - Non-répudiation : Masquer les activités : Souvent, les actions effectuées par le code de contrôle injecté ne sont pas enregistrées.</p>",
                "remediation": "<p>Il est recommandé de limiter autant que possible les capacités de l'utilisateur lorsqu'il lui permet d'exécuter des commandes spécifiques sur le serveur et d'évaluer, en premier lieu, s'il est absolument nécessaire que l'utilisateur puisse exécuter ce type de commande. d'action, car ils impliquent intrinsèquement un danger potentiel. Il serait approprié de restreindre ces capacités étant donné que de nombreux langages ont des fonctions intégrées pour exécuter des commandes sur l'ordinateur, comme la fonction system() de PHP, et qu'il est possible de restreindre les capacités de l'interpréteur qui exécute l'application. (comme dans le cas de PHP).</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
        "category": "Input Validation",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/17-Testing_for_Host_Header_Injection",
                    "https://cwe.mitre.org/data/definitions/644.html"
                ],
                "locale": "fr",
                "title": "Injection de commandes dans les en-têtes HTTP Host.",
                "vulnType": "OWASP WSTG",
                "description": "<p>Un serveur Web héberge généralement plusieurs applications Web sur la même adresse IP, référençant chaque application via l'hôte virtuel. Lors d'une requête HTTP entrante, les serveurs Web envoient généralement la requête à l'hôte virtuel de destination en fonction de la valeur fournie dans l'en-tête Host. Sans validation appropriée de la valeur de l'en-tête, l'attaquant peut fournir des données non valides pour amener le serveur Web à : - Envoyer les requêtes au premier hôte virtuel de la liste. - Provoquer une redirection vers un domaine contrôlé par l'attaquant. - Effectuer un empoisonnement du cache web. - Manipuler la fonctionnalité de réinitialisation du mot de passe.</p>",
                "observation": "<p>Contrôle d'accès : exécuter du code ou des commandes non autorisés : cette faiblesse peut conduire à l'exposition de ressources ou de fonctionnalités à des acteurs involontaires, fournissant éventuellement aux attaquants des informations sensibles ou même exécutant du code arbitraire.</p>",
                "remediation": "<p>Pour filtrer, échapper ou coder des données non sécurisées envoyées depuis le serveur dans un en-tête de réponse HTTP, effectuez une validation de sortie. Désactivez la possibilité pour le navigateur du client d'exécuter des scripts.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
        "category": "Input Validation",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/18-Testing_for_Server-side_Template_Injection",
                    "https://cwe.mitre.org/data/definitions/94.html",
                    "https://portswigger.net/research/server-side-template-injection"
                ],
                "locale": "fr",
                "title": "Injection de modèles côté serveur (SSTI)",
                "vulnType": "OWASP WSTG",
                "description": "<p>Lorsqu'un utilisateur demande une vue HTML, les applications modernes la génèrent à l'aide d'un moteur de modèles (également appelé « modèles »). Les fonctions intégrées du langage de programmation dans ces moteurs de modèles permettent l'exécution de fonctions risquées et même de code sur le serveur hébergeant l'application. Il est possible d'utiliser ces fonctions pour exécuter du code sur le serveur si un utilisateur malveillant peut injecter des directives de modèle, et celles-ci sont ensuite rendues par le moteur de modèle.</p>",
                "observation": "<p>Contrôle d'accès : mécanisme de protection contre le contournement : dans certains cas, le code injectable contrôle l'authentification ; cela peut conduire à une vulnérabilité à distance. - Contrôle d'accès : obtenir des privilèges ou assumer une identité : le code injecté peut accéder à des ressources auxquelles l'attaquant n'a pas directement accès. - Autre : Exécuter du code ou des commandes non autorisés : les attaques par injection de code peuvent entraîner une perte de l'intégrité des données dans presque tous les cas, car les données du plan de contrôle injectées sont toujours accessoires au rappel ou à l'écriture des données. De plus, l’injection de code peut souvent entraîner l’exécution de code arbitraire. - Non-répudiation : Masquer les activités : Souvent, les actions effectuées par le code de contrôle injecté ne sont pas enregistrées.</p>",
                "remediation": "<p>Assurez-vous de ne pas transmettre de variables contrôlables par l'utilisateur aux fonctions qui affichent les modèles. La désinfection de l'entrée est cruciale dans le cas où elle est nécessaire pour empêcher l'interprétation des caractères.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
        "category": "Input Validation",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/19-Testing_for_Server-Side_Request_Forgery",
                    "https://cwe.mitre.org/data/definitions/918.html"
                ],
                "locale": "fr",
                "title": "Falsification de requêtes côté serveur (SSRF)",
                "vulnType": "OWASP WSTG",
                "description": "<p>La vulnérabilité SSRF (Server-Side Request Forgery) survient lorsqu'il est possible de demander au serveur d'envoyer une requête à n'importe quel domaine en utilisant les données d'entrée de l'utilisateur. Lorsque l'utilisateur qui fait la requête ne reçoit pas la réponse du serveur, cette vulnérabilité peut devenir « aveugle ». Aucune réponse de ce type n’est fournie dans ce cas. Cependant, en fonction du temps de réponse du serveur, une énumération des machines à proximité du réseau peut être effectuée.</p>",
                "observation": "<p>Confidentialité : Lire les données de l'application : Le code injecté pourrait accéder à des données/fichiers restreints. - Intégrité : exécuter du code ou des commandes non autorisés : l'attaquant peut être en mesure de créer ou d'écraser des fichiers critiques utilisés pour exécuter du code, tels que des programmes ou des bibliothèques.</p>",
                "remediation": "<p>La mise sur liste blanche des entrées autorisées par ce paramètre constitue l’atténuation appropriée pour cette vulnérabilité. En d’autres termes, n’acceptez que les chemins d’accès aux ressources auxquels vous avez réellement besoin d’accéder car, pour le moment, toute autre action donne aux utilisateurs de www-data l’accès à n’importe quelle zone du système d’autorisations où ils peuvent lire.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:L",
        "category": "Input Validation",
        "details": [
            {
                "references": [
                    "https://cwe.mitre.org/data/definitions/20.html"
                ],
                "locale": "fr",
                "title": "Schéma de validation JSON",
                "vulnType": "OWASP WSTG",
                "description": "<p>Un vocabulaire appelé JSON Schema vous permet d'annoter et de valider des documents JSON. Vous disposez d'un meilleur contrôle sur les types d'entrées utilisateur qui peuvent être fournies dans votre application lors de l'ajout de schémas à vos fichiers JSON. Lorsque cela est fait correctement, cela réduit considérablement le vecteur d'un attaquant. Cependant, comme ligne de défense supplémentaire, vous devez toujours appliquer votre propre validation et rejet des entrées. Cette stratégie est également préférable car vous souhaitez également contrecarrer et enregistrer les demandes et les entrées des utilisateurs.</p>",
                "observation": "<p>Disponibilité : DoS : Consommation de ressources (Mémoire) : Un attaquant pourrait fournir des valeurs inattendues et provoquer un crash du programme ou une consommation excessive de ressources, telles que la mémoire et le CPU. - Confidentialité : lecture de fichiers ou de répertoires : un attaquant pourrait lire des données confidentielles s'il est capable de contrôler les références aux ressources. - Disponibilité : exécuter du code ou des commandes non autorisés : un attaquant pourrait utiliser une entrée malveillante pour modifier des données ou éventuellement altérer le flux de contrôle de manière inattendue, y compris l'exécution de commandes arbitraires.</p>",
                "remediation": "<p>Pour garantir une requête JSON correctement formatée, confirmez que la validation du schéma JSON a lieu. Ensuite, validez chaque champ de saisie avant tout traitement des données.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:L",
        "category": "Input Validation",
        "details": [
            {
                "references": [
                    "https://cwe.mitre.org/data/definitions/20.html"
                ],
                "locale": "fr",
                "title": "Schéma XML (XSD)",
                "vulnType": "OWASP WSTG",
                "description": "<p>Vous disposez d'un meilleur contrôle sur le type d'entrée utilisateur qui peut être fourni dans votre application lors de l'ajout de schémas à vos fichiers XML. Lorsque cela est fait correctement, cela réduit considérablement le vecteur d'un attaquant. Cependant, comme ligne de défense supplémentaire, vous devez toujours appliquer votre propre validation et rejet des entrées. Cette stratégie est également préférable car vous souhaitez également contrecarrer et enregistrer les demandes et les entrées des utilisateurs.</p>",
                "observation": "<p>Disponibilité : DoS : Consommation de ressources (Mémoire) : Un attaquant pourrait fournir des valeurs inattendues et provoquer un crash du programme ou une consommation excessive de ressources, telles que la mémoire et le CPU. - Confidentialité : lecture de fichiers ou de répertoires : un attaquant pourrait lire des données confidentielles s'il est capable de contrôler les références aux ressources. - Disponibilité : exécuter du code ou des commandes non autorisés : un attaquant pourrait utiliser une entrée malveillante pour modifier des données ou éventuellement altérer le flux de contrôle de manière inattendue, y compris l'exécution de commandes arbitraires.</p>",
                "remediation": "<p>Vérifiez que le schéma XSD est validé pour garantir que le document XML est correctement formaté, puis validez chaque champ de saisie avant le traitement des données.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:L",
        "category": "Input Validation",
        "details": [
            {
                "references": [
                    "https://cwe.mitre.org/data/definitions/20.html"
                ],
                "locale": "fr",
                "title": "Vérifier que les données structurées sont fortement typées et validées",
                "vulnType": "OWASP WSTG",
                "description": "<p>Lorsque les données structurées sont étroitement typées et vérifiées par rapport à un schéma spécifié, une application proactive défendable peut être créée. En utilisant les schémas définis, l'application peut désormais mesurer tout ce qui est en dehors de son fonctionnement prévu et doit être utilisée pour rejeter l'entrée si les vérifications du schéma renvoient faux.</p>",
                "observation": "<p>Disponibilité : DoS : Consommation de ressources (Mémoire) : Un attaquant pourrait fournir des valeurs inattendues et provoquer un crash du programme ou une consommation excessive de ressources, telles que la mémoire et le CPU. - Confidentialité : lecture de fichiers ou de répertoires : un attaquant pourrait lire des données confidentielles s'il est capable de contrôler les références aux ressources. - Disponibilité : exécuter du code ou des commandes non autorisés : un attaquant pourrait utiliser une entrée malveillante pour modifier des données ou éventuellement altérer le flux de contrôle de manière inattendue, y compris l'exécution de commandes arbitraires.</p>",
                "remediation": "<p>Vérifiez que les données structurées sont fortement typées et validées par rapport à un schéma défini, y compris les caractères, la longueur et le modèle autorisés (par exemple, les numéros de carte de crédit ou les numéros de téléphone, ou en vérifiant que deux champs associés sont logiques, comme la validation de la banlieue et du code postal ou les codes postaux correspondent).</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
        "category": "Error handling",
        "details": [
            {
                "references": [
                    "https://cwe.mitre.org/data/definitions/20.html"
                ],
                "locale": "fr",
                "title": "Divulgation d'informations sensibles en raison d'une mauvaise gestion des erreurs de candidature.",
                "vulnType": "OWASP WSTG",
                "description": "<p>Les erreurs verbeuses qui ne sont pas correctement contrôlées entraînent fréquemment des réponses qui informent l'utilisateur de l'architecture interne de l'application. Les versions des logiciels installés ou les informations de la base de données sont quelques exemples de données pouvant être récupérées de cette manière.</p>",
                "observation": "<ul><li><p>Confidentialité : lecture des données de l'application : l'attaquant obtient des informations à partir d'une réponse à un message d'erreur.</p></li></ul>",
                "remediation": "<p>Pour empêcher l'application d'afficher des informations sensibles de votre infrastructure ou base de données, mettez en œuvre un système de redirections approprié vers des pages sécurisées ou des textes génériques dans la réponse.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N",
        "category": "Functionality/Business Logic",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/08-Testing_for_Error_Handling/01-Testing_For_Improper_Error_Handling"
                ],
                "locale": "fr",
                "title": "Abus du flux de travail de la logique applicative.",
                "vulnType": "OWASP WSTG",
                "description": "<p>Les vulnérabilités de workflow impliquent tout type de vulnérabilité qui permet à un attaquant d'utiliser à mauvais escient une application/un système d'une manière qui lui permet de contourner (ne pas suivre) le workflow conçu/prévu. Définition d'un workflow sur Wikipédia : Un workflow consiste en une séquence d'étapes connectées dans lesquelles chaque étape se déroule sans délai ni intervalle, se terminant juste avant que l'étape suivante puisse commencer. Il s'agit d'une représentation d'une séquence d'opérations, énoncée comme le travail d'une personne ou d'un groupe, d'une organisation de personnel ou d'un ou plusieurs mécanismes simples ou complexes. Le workflow peut être considéré comme une abstraction du travail réel. La logique métier de l'application doit exiger que l'utilisateur effectue des étapes spécifiques dans l'ordre correct/spécifique et si le flux de travail est terminé sans l'avoir terminé avec succès, toutes les actions et actions générées sont « annulées » ou abandonnées. Les vulnérabilités liées au contournement du flux de travail de la logique métier correcte sont uniques dans le sens où elles sont très spécifiques à l'application/au système et des cas d'abus manuels minutieux doivent être développés en utilisant les exigences. et cas d'utilisation. Le processus métier des applications doit avoir des contrôles pour garantir que les transactions/actions des utilisateurs se déroulent dans l'ordre correct/acceptable et si une transaction déclenche un certain type d'action, cette action sera \"\" annulée \"\" et supprimée si la transaction ne se termine pas avec succès. .</p>",
                "observation": "<p>Autre : modification de la logique d'exécution : un attaquant pourrait amener le logiciel à sauter des étapes critiques ou à les exécuter dans le mauvais ordre, contournant ainsi sa logique métier prévue. Cela peut parfois avoir des implications en matière de sécurité.</p>",
                "remediation": "<p>L'application a besoin de contrôles qui garantissent que les utilisateurs effectuent chaque étape du flux de travail dans le bon ordre et empêchent les attaquants de contourner, sauter ou rejouer des étapes ou des processus du flux de travail. Il doit également être conscient de lui-même. Créer des cas d'abus ou d'utilisation abusive de la logique métier dans le but de mener à bien le processus métier sans terminer les étapes correctes dans le bon ordre est la manière dont sont effectués les tests de vulnérabilités du flux de travail.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
        "category": "Functionality/Business Logic",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/10-Business_Logic_Testing/09-Test_Upload_of_Malicious_Files.html",
                    "https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html"
                ],
                "locale": "fr",
                "title": "Validation non sécurisée dans la fonctionnalité de téléchargement de fichiers",
                "vulnType": "OWASP WSTG",
                "description": "<p>De nombreuses applications permettent aux utilisateurs de télécharger des données dans leurs processus métier. Bien que la validation des champs de saisie textuels soit largement comprise, l’acceptation de fichiers rend sa mise en œuvre plus difficile. Même si de nombreux sites Web utilisent des restrictions simples basées sur une liste d'extensions autorisées (ou bloquées), cela ne suffit pas à empêcher les attaquants de charger des types de fichiers sécurisés contenant du contenu malveillant.</p>",
                "observation": "<ul><li><p>Disponibilité : Exécuter du code ou des commandes non autorisés : L'exécution de code arbitraire est possible si un fichier téléchargé est interprété et exécuté comme du code par le destinataire. Cela est particulièrement vrai pour les extensions .asp et .php téléchargées sur des serveurs Web, car ces types de fichiers sont souvent traités comme automatiquement exécutables, même lorsque les autorisations du système de fichiers ne spécifient pas l'exécution. Par exemple, dans les environnements Unix, les programmes ne peuvent généralement pas s'exécuter à moins que le bit d'exécution soit défini, mais les programmes PHP peuvent être exécutés par le serveur Web sans les appeler directement sur le système d'exploitation.</p></li></ul>",
                "remediation": "<p>Contrôlez correctement les types de fichiers envoyés à l’application. Examinez le type de fichier en faisant attention à la fois à l'extension et au contenu.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:L",
        "category": "Functionality/Business Logic",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/10-Business_Logic_Testing/01-Test_Business_Logic_Data_Validation",
                    "https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html",
                    "https://cwe.mitre.org/data/definitions/502.html"
                ],
                "locale": "fr",
                "title": "Désérialisation non sécurisée",
                "vulnType": "OWASP WSTG",
                "description": "<p>Il est souvent pratique de sérialiser des objets pour les communiquer ou de les enregistrer pour une utilisation ultérieure. Cependant, le code ou les données désérialisées peuvent souvent être modifiés sans utiliser les fonctions d'accès fournies s'ils n'utilisent pas la cryptographie pour se protéger. De plus, toute cryptographie serait toujours une sécurité côté client, ce qui constitue une hypothèse de sécurité dangereuse. On ne peut pas croire que les données non fiables sont bien formées. Lorsque les développeurs n'imposent pas de restrictions sur les \"\" chaînes de gadgets \"\", ou sur les séries d'instances et d'invocations de méthodes qui peuvent s'exécuter automatiquement pendant le processus de désérialisation (c'est-à-dire avant que l'objet ne soit renvoyé à l'appelant), elles peuvent parfois être exploitées par des attaquants. pour effectuer des actions non autorisées, telles que générer un shell. La sérialisation et la désérialisation font référence au processus consistant à prendre les données liées à l'objet interne du programme, à les conditionner de manière à permettre aux données d'être stockées ou transférées en externe (« sérialisation » »), puis à extraire les données sérialisées pour reconstruire le objet. original (\"\"désérialisation\"\").</p>",
                "observation": "<ul><li><p>Intégrité : État inattendu : les attaquants peuvent modifier des objets ou des données inattendus qui étaient supposés être à l'abri de toute modification. - Disponibilité : DoS : consommation de ressources (CPU) : si une fonction fait une hypothèse sur le moment où elle doit se terminer, en fonction d'une sentinelle dans une chaîne, elle pourrait facilement ne jamais se terminer. - Autre : varie selon le contexte : les conséquences peuvent varier considérablement, car elles dépendent des objets ou des méthodes qui sont désérialisés et de la manière dont ils sont utilisés. Supposer que le code de l'objet désérialisé est valide est dangereux et peut permettre une exploitation.</p></li></ul>",
                "remediation": "<p>Les mesures d'atténuation possibles pour les différentes phases du processus de création d'application sont décrites ci-dessous : - Phases : Architecture et conception ; mise en œuvre. Si disponibles, utilisez les fonctionnalités de signature/scellement du langage de programmation pour vous assurer que les données désérialisées n’ont pas été entachées. Par exemple, un code d'authentification de message basé sur le hachage (HMAC) pourrait être utilisé pour garantir que les données n'ont pas été modifiées. - Phase : Mise en œuvre. Lors de la désérialisation de données, il est recommandé de renseigner un nouvel objet plutôt que de simplement désérialiser. Le résultat est que les données passent par une validation d’entrée sécurisée et que les fonctions sont sécurisées. - Phase : Mise en œuvre. Définissez explicitement un objet final() pour éviter la désérialisation. - Phases : Architecture et Conception ; Mise en œuvre. Rendre les champs transitoires pour les protéger de la désérialisation. Une tentative de sérialisation puis de désérialisation d'une classe contenant des champs transitoires entraînera des valeurs NULL là où les données transitoires devraient se trouver. Il s’agit d’un excellent moyen d’empêcher le transfert et l’utilisation abusive de variables temporaires, d’environnement ou sensibles. - Phase : Mise en œuvre. Évitez de disposer de types ou de gadgets inutiles qui pourraient être exploités à des fins malveillantes. Cela limite la possibilité que des types et des gadgets indésirables ou non autorisés soient exploités par l'attaquant. Ajoutez uniquement les classes acceptables à une liste verte. Remarque : De nouveaux gadgets sont constamment découverts, cela ne constitue donc pas une atténuation suffisante.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:L/A:N",
        "category": "Web client side",
        "details": [
            {
                "references": [
                    "https://cwe.mitre.org/data/definitions/601.html",
                    "https://portswigger.net/kb/issues/00500100_open-redirection-reflected"
                ],
                "locale": "fr",
                "title": "Redirection d'URL côté client (redirection ouverte)",
                "vulnType": "OWASP WSTG",
                "description": "<p>Une vulnérabilité connue sous le nom d'Open Redirect se produit lorsqu'un programme intègre par inadvertance des données contrôlables par l'utilisateur dans la destination d'une redirection. Au sein de l'application, un attaquant peut créer une URL qui dirige le trafic vers n'importe quel domaine externe.</p>",
                "observation": "<p>Contrôle d'accès : obtenir des privilèges ou assumer une identité : l'utilisateur peut être redirigé vers une page non fiable contenant des logiciels malveillants susceptibles de compromettre la machine de l'utilisateur. Cela exposera l'utilisateur à des risques importants et l'interaction de l'utilisateur avec le serveur Web peut également être compromise si le logiciel malveillant effectue un enregistrement de frappe ou d'autres attaques qui volent des informations d'identification, des informations personnelles identifiables (PII) ou d'autres données importantes. - Autre : Autre : L'utilisateur peut être soumis à des attaques de phishing en étant redirigé vers une page non fiable. L'attaque de phishing peut pointer vers une page Web contrôlée par l'attaquant qui semble être un site Web de confiance. Les phishers peuvent alors voler les informations d'identification de l'utilisateur, puis utiliser ces informations d'identification pour accéder au site Web légitime.</p>",
                "remediation": "<p>En désactivant la fonction de redirection ou en conservant une liste côté serveur de toutes les URL autorisées pour la redirection, les applications doivent, dans la mesure du possible, éviter d'incorporer des données contrôlables par l'utilisateur dans les cibles de redirection.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
        "category": "Web client side",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/03-Testing_for_HTML_Injection",
                    "https://cwe.mitre.org/data/definitions/20.html"
                ],
                "locale": "fr",
                "title": "Injection de contenu HTML",
                "vulnType": "OWASP WSTG",
                "description": "<p>Les injections HTML permettent l'injection côté client de code HTML que le navigateur de la victime interprétera lors de la visite d'une URL. Il est possible de modifier le DOM et, dans certaines circonstances, d'injecter du code JavaScript pour faciliter le vol des données du navigateur de la victime.</p>",
                "observation": "<p>Disponibilité : DoS : Consommation de ressources (Mémoire) : Un attaquant pourrait fournir des valeurs inattendues et provoquer un crash du programme ou une consommation excessive de ressources, telles que la mémoire et le CPU. - Confidentialité : lecture de fichiers ou de répertoires : un attaquant pourrait lire des données confidentielles s'il est capable de contrôler les références aux ressources. - Disponibilité : exécuter du code ou des commandes non autorisés : un attaquant pourrait utiliser une entrée malveillante pour modifier des données ou éventuellement altérer le flux de contrôle de manière inattendue, y compris l'exécution de commandes arbitraires.</p>",
                "remediation": "<p>Ce type d'attaque peut être stoppé en nettoyant correctement les entrées de l'utilisateur ou en validant correctement le contenu que le serveur reçoit et envoie.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N",
        "category": "Web client side",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/05-Testing_for_CSS_Injection",
                    "https://research.securitum.com/css-data-exfiltration-in-firefox-via-single-injection-point/",
                    "https://cwe.mitre.org/data/definitions/20.html"
                ],
                "locale": "fr",
                "title": "Injection de contenu CSS",
                "vulnType": "OWASP WSTG",
                "description": "<p>Semblable au fonctionnement des injections HTML ou XSS, les injections CSS donnent aux pirates la possibilité d'insérer du code CSS côté client, que le navigateur de la victime interprétera ensuite lorsqu'elle visitera une URL. Il a été démontré qu'il est possible d'exfiltrer des données du DOM en utilisant uniquement CSS, même si CSS n'a pas le même potentiel que HTML ou JavaScript et n'est capable d'exporter que des styles.</p>",
                "observation": "<p>Disponibilité : DoS : Consommation de ressources (Mémoire) : Un attaquant pourrait fournir des valeurs inattendues et provoquer un crash du programme ou une consommation excessive de ressources, telles que la mémoire et le CPU. - Confidentialité : lecture de fichiers ou de répertoires : un attaquant pourrait lire des données confidentielles s'il est capable de contrôler les références aux ressources. - Disponibilité : exécuter du code ou des commandes non autorisés : un attaquant pourrait utiliser une entrée malveillante pour modifier des données ou éventuellement altérer le flux de contrôle de manière inattendue, y compris l'exécution de commandes arbitraires.</p>",
                "remediation": "<p>Ce type d'attaque peut être stoppé en validant correctement le contenu que le serveur reçoit et envoie, ou en nettoyant correctement les entrées de l'utilisateur.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
        "category": "Web client side",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/01-Testing_for_DOM-based_Cross_Site_Scripting",
                    "https://cwe.mitre.org/data/definitions/79.html"
                ],
                "locale": "fr",
                "title": "Cross Site Scripting (XSS) basés sur DOM",
                "vulnType": "OWASP WSTG",
                "description": "<p>Une attaque XSS connue sous le nom de XSS basé sur DOM provoque l'exécution du code côté client de manière « inattendue » en modifiant « l'environnement » DOM que le navigateur de la victime a été conçu pour utiliser par le script côté client d'origine. En raison de modifications malveillantes apportées à l'environnement DOM, le code côté client contenu dans la page s'exécute différemment même si la page elle-même (c'est-à-dire la réponse HTTP) reste la même. En revanche, d'autres attaques XSS (stockées ou réfléchies) placent la charge utile de l'attaque sur la page de réponse (en raison d'une défaillance côté serveur).</p>",
                "observation": "<p>Confidentialité : lecture des données d'application : l'attaque la plus courante effectuée avec des Cross Site Scripting implique la divulgation d'informations stockées dans les cookies des utilisateurs. En règle générale, un utilisateur malveillant créera un script côté client qui, une fois analysé par un navigateur Web, effectuera certaines activités (telles que l'envoi de tous les cookies du site à une adresse e-mail donnée). Ce script sera chargé et exécuté par chaque utilisateur visitant le site Web. Puisque le site demandant l’exécution du script a accès aux cookies en question, le script malveillant le fait également. - Disponibilité : Exécuter du code ou des commandes non autorisés : dans certaines circonstances, il peut être possible d'exécuter du code arbitraire sur l'ordinateur d'une victime lorsque les Cross Site Scripting sont combinés avec d'autres failles. - Contrôle d'accès : lecture des données d'application : la conséquence d'une attaque XSS est la même, qu'elle soit stockée ou réfléchie. La différence réside dans la manière dont la charge utile arrive au serveur. XSS peut provoquer divers problèmes pour l'utilisateur final, dont la gravité va d'une gêne à une compromission complète du compte. Certaines vulnérabilités de cross-site scripting peuvent être exploitées pour manipuler ou voler des cookies, créer des requêtes qui peuvent être confondues avec celles d'un utilisateur valide, compromettre des informations confidentielles ou exécuter du code malveillant sur les systèmes des utilisateurs finaux à diverses fins néfastes. D'autres attaques dommageables incluent la divulgation des fichiers de l'utilisateur final, l'installation de programmes de chevaux de Troie, la redirection de l'utilisateur vers une autre page ou un autre site, l'exécution de contrôles \"Active X\" (sous Microsoft Internet Explorer) à partir de sites qu'un utilisateur perçoit comme dignes de confiance et la modification présentation du contenu.</p>",
                "remediation": "<p>Aucune action ne peut à elle seule éliminer complètement la menace des attaques basées sur le DOM. D’une manière générale, cependant, le moyen le plus efficace de prévenir les vulnérabilités basées sur le DOM consiste à empêcher les données provenant de toute source non fiable de modifier dynamiquement la valeur transmise à n’importe quel récepteur. Si la fonctionnalité souhaitée de l’application signifie que ce comportement est inévitable, alors des défenses doivent être implémentées dans le code côté client. Dans de nombreux cas, les données pertinentes peuvent être validées par rapport à une liste blanche, autorisant uniquement le contenu dont on sait qu'il est sûr. Dans d’autres cas, il sera nécessaire de nettoyer ou de chiffrer les données. Cela peut être une tâche complexe et, selon le contexte dans lequel les données doivent être insérées, peut impliquer une combinaison d'échappement JavaScript, de codage HTML et de codage URL, dans l'ordre approprié.</p>"
            }
        ]
    },
    {
        "cvssv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N",
        "category": "Web client side",
        "details": [
            {
                "references": [
                    "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/07-Testing_Cross_Origin_Resource_Sharing",
                    "https://cwe.mitre.org/data/definitions/942.html",
                    "https://developer.mozilla.org/es/docs/Web/HTTP/CORS",
                    "https://stackoverflow.com/questions/1653308/access-control-allow-origin-multiple-origin-domains"
                ],
                "locale": "fr",
                "title": "Mauvaise configuration du partage de ressources Cross-Origin (CORS)",
                "vulnType": "OWASP WSTG",
                "description": "<p>CORS signifie Partage de ressources inter-origines. C'est une fonctionnalité offrant la possibilité à : - Une application web d'exposer des ressources à tout ou domaine restreint. - Un client web pour faire une requête AJAX de ressource sur un autre domaine que son domaine source. Une politique CORS non restrictive peut faire l'objet d'abus de plusieurs manières, ce qui peut mettre en danger la confidentialité, la disponibilité et l'intégrité des informations de l'utilisateur.</p>",
                "observation": "<ul><li><p>Autre : varie selon le contexte : un attaquant peut accéder à toute fonctionnalité accessible par inadvertance à la source.</p></li></ul>",
                "remediation": "<p>Autorisez uniquement les domaines ou sous-domaines approuvés auxquels l’application doit faire confiance dans l’en-tête Access-Control-Allow-Origin.</p>"
            }
        ]
    }
]